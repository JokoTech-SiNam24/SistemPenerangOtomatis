
SistemPenerangOtomatis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  000030d0  00003164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d8  0080204a  0080204a  000031ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000320c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000570  00000000  00000000  00003250  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012261  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000054d5  00000000  00000000  00015a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000919e  00000000  00000000  0001aef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b1c  00000000  00000000  00024094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034ab5  00000000  00000000  00025bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008862  00000000  00000000  0005a665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  00062ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c876  00000000  00000000  000634f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_14>
      3c:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_15>
      40:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_16>
      44:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_17>
      48:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_18>
      4c:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_19>
      50:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__vector_20>
      54:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__vector_21>
      58:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__vector_22>
      5c:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_23>
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_39>
      a0:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_40>
      a4:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_41>
      a8:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_47>
      c0:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_48>
      c4:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__vector_49>
      c8:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_50>
      cc:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_51>
      d0:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_52>
      d4:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__vector_53>
      d8:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_54>
      dc:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__vector_55>
      e0:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ca c7       	rjmp	.+3988   	; 0x10b2 <__vector_71>
     11e:	00 00       	nop
     120:	fa c7       	rjmp	.+4084   	; 0x1116 <__vector_72>
     122:	00 00       	nop
     124:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_73>
     128:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_74>
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_77>
     138:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_78>
     13c:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__vector_79>
     140:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_80>
     144:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__vector_81>
     148:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_82>
     14c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__vector_83>
     150:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_84>
     154:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_85>
     158:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_108>
     1b4:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__vector_109>
     1b8:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__vector_110>
     1bc:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__vector_111>
     1c0:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__vector_112>
     1c4:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d7e>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6566>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x653e>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5566>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d3e>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e0 ed       	ldi	r30, 0xD0	; 208
     4a6:	f0 e3       	ldi	r31, 0x30	; 48
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	aa 34       	cpi	r26, 0x4A	; 74
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	aa e4       	ldi	r26, 0x4A	; 74
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a2 32       	cpi	r26, 0x22	; 34
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 ca 14 	call	0x2994	; 0x2994 <main>
     4cc:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	43 d4       	rcall	.+2182   	; 0xdbc <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	64 d4       	rcall	.+2248   	; 0xe1a <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	72 d4       	rcall	.+2276   	; 0xe50 <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	6e d4       	rcall	.+2268   	; 0xe7c <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	50 d4       	rcall	.+2208   	; 0xe50 <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	4b d4       	rcall	.+2198   	; 0xe7c <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	2d d4       	rcall	.+2138   	; 0xe50 <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	28 d4       	rcall	.+2128   	; 0xe7c <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	0a d4       	rcall	.+2068   	; 0xe50 <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	05 d4       	rcall	.+2058   	; 0xe7c <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	e7 d3       	rcall	.+1998   	; 0xe50 <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	e2 d3       	rcall	.+1988   	; 0xe7c <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	c4 d3       	rcall	.+1928   	; 0xe50 <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	bf d3       	rcall	.+1918   	; 0xe7c <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	a1 d3       	rcall	.+1858   	; 0xe50 <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	9d d3       	rcall	.+1850   	; 0xe7c <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	7f d3       	rcall	.+1790   	; 0xe50 <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	7a d3       	rcall	.+1780   	; 0xe7c <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	5c d3       	rcall	.+1720   	; 0xe50 <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	57 d3       	rcall	.+1710   	; 0xe7c <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	39 d3       	rcall	.+1650   	; 0xe50 <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	34 d3       	rcall	.+1640   	; 0xe7c <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	16 d3       	rcall	.+1580   	; 0xe50 <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	11 d3       	rcall	.+1570   	; 0xe7c <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     876:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     87a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     87e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     882:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     886:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     88a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     88e:	08 95       	ret

00000890 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     89a:	9f b7       	in	r25, 0x3f	; 63
     89c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     89e:	f8 94       	cli
	return flags;
     8a0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8a2:	e8 2f       	mov	r30, r24
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e0 59       	subi	r30, 0x90	; 144
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	60 95       	com	r22
     8ac:	80 81       	ld	r24, Z
     8ae:	68 23       	and	r22, r24
     8b0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	1f 92       	push	r1
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8c6:	9f b7       	in	r25, 0x3f	; 63
     8c8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8ca:	f8 94       	cli
	return flags;
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     8ce:	e8 2f       	mov	r30, r24
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	e0 59       	subi	r30, 0x90	; 144
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	80 81       	ld	r24, Z
     8d8:	68 2b       	or	r22, r24
     8da:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8dc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	08 2f       	mov	r16, r24
     8f8:	f6 2e       	mov	r15, r22
     8fa:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8fc:	1a d1       	rcall	.+564    	; 0xb32 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8fe:	0f 70       	andi	r16, 0x0F	; 15
     900:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     902:	8b e2       	ldi	r24, 0x2B	; 43
     904:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	80 ea       	ldi	r24, 0xA0	; 160
     90e:	99 e0       	ldi	r25, 0x09	; 9
     910:	9f d2       	rcall	.+1342   	; 0xe50 <usart_spi_select_device>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     918:	e0 ea       	ldi	r30, 0xA0	; 160
     91a:	f9 e0       	ldi	r31, 0x09	; 9
     91c:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     91e:	95 ff       	sbrs	r25, 5
     920:	fd cf       	rjmp	.-6      	; 0x91c <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     922:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     926:	e0 ea       	ldi	r30, 0xA0	; 160
     928:	f9 e0       	ldi	r31, 0x09	; 9
     92a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     92c:	86 ff       	sbrs	r24, 6
     92e:	fd cf       	rjmp	.-6      	; 0x92a <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     930:	e0 ea       	ldi	r30, 0xA0	; 160
     932:	f9 e0       	ldi	r31, 0x09	; 9
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     938:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     93a:	be 01       	movw	r22, r28
     93c:	6f 5f       	subi	r22, 0xFF	; 255
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	80 ea       	ldi	r24, 0xA0	; 160
     942:	99 e0       	ldi	r25, 0x09	; 9
     944:	9b d2       	rcall	.+1334   	; 0xe7c <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     946:	0f 2d       	mov	r16, r15
     948:	0f 77       	andi	r16, 0x7F	; 127
     94a:	02 95       	swap	r16
     94c:	0f 70       	andi	r16, 0x0F	; 15
     94e:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     950:	8b e2       	ldi	r24, 0x2B	; 43
     952:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     954:	be 01       	movw	r22, r28
     956:	6f 5f       	subi	r22, 0xFF	; 255
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	80 ea       	ldi	r24, 0xA0	; 160
     95c:	99 e0       	ldi	r25, 0x09	; 9
     95e:	78 d2       	rcall	.+1264   	; 0xe50 <usart_spi_select_device>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     966:	e0 ea       	ldi	r30, 0xA0	; 160
     968:	f9 e0       	ldi	r31, 0x09	; 9
     96a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     96c:	85 ff       	sbrs	r24, 5
     96e:	fd cf       	rjmp	.-6      	; 0x96a <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     970:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     974:	e0 ea       	ldi	r30, 0xA0	; 160
     976:	f9 e0       	ldi	r31, 0x09	; 9
     978:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     97a:	86 ff       	sbrs	r24, 6
     97c:	fd cf       	rjmp	.-6      	; 0x978 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     97e:	e0 ea       	ldi	r30, 0xA0	; 160
     980:	f9 e0       	ldi	r31, 0x09	; 9
     982:	80 e4       	ldi	r24, 0x40	; 64
     984:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     986:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	80 ea       	ldi	r24, 0xA0	; 160
     990:	99 e0       	ldi	r25, 0x09	; 9
     992:	74 d2       	rcall	.+1256   	; 0xe7c <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     994:	0f 2d       	mov	r16, r15
     996:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     998:	8b e2       	ldi	r24, 0x2B	; 43
     99a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	80 ea       	ldi	r24, 0xA0	; 160
     9a4:	99 e0       	ldi	r25, 0x09	; 9
     9a6:	54 d2       	rcall	.+1192   	; 0xe50 <usart_spi_select_device>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ae:	e0 ea       	ldi	r30, 0xA0	; 160
     9b0:	f9 e0       	ldi	r31, 0x09	; 9
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9b4:	85 ff       	sbrs	r24, 5
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9bc:	e0 ea       	ldi	r30, 0xA0	; 160
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9c2:	86 ff       	sbrs	r24, 6
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c6:	e0 ea       	ldi	r30, 0xA0	; 160
     9c8:	f9 e0       	ldi	r31, 0x09	; 9
     9ca:	80 e4       	ldi	r24, 0x40	; 64
     9cc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ce:	80 81       	ld	r24, Z
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	80 ea       	ldi	r24, 0xA0	; 160
     9d8:	99 e0       	ldi	r25, 0x09	; 9
     9da:	50 d2       	rcall	.+1184   	; 0xe7c <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9dc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	be 01       	movw	r22, r28
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	80 ea       	ldi	r24, 0xA0	; 160
     9e8:	99 e0       	ldi	r25, 0x09	; 9
     9ea:	32 d2       	rcall	.+1124   	; 0xe50 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9f2:	e0 ea       	ldi	r30, 0xA0	; 160
     9f4:	f9 e0       	ldi	r31, 0x09	; 9
     9f6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f8:	85 ff       	sbrs	r24, 5
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9fc:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a00:	e0 ea       	ldi	r30, 0xA0	; 160
     a02:	f9 e0       	ldi	r31, 0x09	; 9
     a04:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a06:	86 ff       	sbrs	r24, 6
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a0a:	e0 ea       	ldi	r30, 0xA0	; 160
     a0c:	f9 e0       	ldi	r31, 0x09	; 9
     a0e:	80 e4       	ldi	r24, 0x40	; 64
     a10:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a12:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	80 ea       	ldi	r24, 0xA0	; 160
     a22:	99 e0       	ldi	r25, 0x09	; 9
     a24:	2b d2       	rcall	.+1110   	; 0xe7c <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	08 95       	ret

00000a34 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	1f 92       	push	r1
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a42:	8a e4       	ldi	r24, 0x4A	; 74
     a44:	90 e2       	ldi	r25, 0x20	; 32
     a46:	70 d0       	rcall	.+224    	; 0xb28 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a48:	4f dd       	rcall	.-1378   	; 0x4e8 <st7565r_init>
     a4a:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	80 ea       	ldi	r24, 0xA0	; 160
     a56:	99 e0       	ldi	r25, 0x09	; 9
     a58:	fb d1       	rcall	.+1014   	; 0xe50 <usart_spi_select_device>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a60:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a62:	f9 e0       	ldi	r31, 0x09	; 9
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <gfx_mono_st7565r_init+0x30>
     a6a:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a6c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a70:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a72:	f9 e0       	ldi	r31, 0x09	; 9
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <gfx_mono_st7565r_init+0x40>
     a7a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a7c:	f9 e0       	ldi	r31, 0x09	; 9
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	81 83       	std	Z+1, r24	; 0x01
     a82:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a84:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	80 ea       	ldi	r24, 0xA0	; 160
     a8c:	99 e0       	ldi	r25, 0x09	; 9
     a8e:	f6 d1       	rcall	.+1004   	; 0xe7c <usart_spi_deselect_device>
     a90:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a92:	0a c0       	rjmp	.+20     	; 0xaa8 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	61 2f       	mov	r22, r17
     a98:	80 2f       	mov	r24, r16
     a9a:	25 df       	rcall	.-438    	; 0x8e6 <gfx_mono_st7565r_put_byte>
     a9c:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a9e:	10 38       	cpi	r17, 0x80	; 128
     aa0:	c9 f7       	brne	.-14     	; 0xa94 <gfx_mono_st7565r_init+0x60>
     aa2:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     aa4:	04 30       	cpi	r16, 0x04	; 4
     aa6:	11 f0       	breq	.+4      	; 0xaac <gfx_mono_st7565r_init+0x78>
     aa8:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     aaa:	f4 cf       	rjmp	.-24     	; 0xa94 <gfx_mono_st7565r_init+0x60>
     aac:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <gfx_mono_st7565r_draw_pixel>:
     ab8:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     ac2:	88 23       	and	r24, r24
     ac4:	4c f1       	brlt	.+82     	; 0xb18 <gfx_mono_st7565r_draw_pixel+0x60>
     ac6:	60 32       	cpi	r22, 0x20	; 32
     ac8:	38 f5       	brcc	.+78     	; 0xb18 <gfx_mono_st7565r_draw_pixel+0x60>
     aca:	d4 2f       	mov	r29, r20
     acc:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ace:	f6 2e       	mov	r15, r22
     ad0:	f6 94       	lsr	r15
     ad2:	f6 94       	lsr	r15
     ad4:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	f8 9e       	mul	r15, r24
     adc:	60 19       	sub	r22, r0
     ade:	71 09       	sbc	r23, r1
     ae0:	11 24       	eor	r1, r1
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	8c 01       	movw	r16, r24
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <gfx_mono_st7565r_draw_pixel+0x36>
     aea:	00 0f       	add	r16, r16
     aec:	11 1f       	adc	r17, r17
     aee:	6a 95       	dec	r22
     af0:	e2 f7       	brpl	.-8      	; 0xaea <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     af2:	6c 2f       	mov	r22, r28
     af4:	8f 2d       	mov	r24, r15
     af6:	2b d0       	rcall	.+86     	; 0xb4e <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     af8:	d1 30       	cpi	r29, 0x01	; 1
     afa:	21 f0       	breq	.+8      	; 0xb04 <gfx_mono_st7565r_draw_pixel+0x4c>
     afc:	28 f0       	brcs	.+10     	; 0xb08 <gfx_mono_st7565r_draw_pixel+0x50>
     afe:	d2 30       	cpi	r29, 0x02	; 2
     b00:	31 f0       	breq	.+12     	; 0xb0e <gfx_mono_st7565r_draw_pixel+0x56>
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     b04:	80 2b       	or	r24, r16
		break;
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     b08:	00 95       	com	r16
     b0a:	80 23       	and	r24, r16
		break;
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     b0e:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     b10:	48 2f       	mov	r20, r24
     b12:	6c 2f       	mov	r22, r28
     b14:	8f 2d       	mov	r24, r15
     b16:	e7 de       	rcall	.-562    	; 0x8e6 <gfx_mono_st7565r_put_byte>
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	08 95       	ret

00000b24 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b24:	14 c0       	rjmp	.+40     	; 0xb4e <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b26:	08 95       	ret

00000b28 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b28:	80 93 4a 22 	sts	0x224A, r24	; 0x80224a <fbpointer>
     b2c:	90 93 4b 22 	sts	0x224B, r25	; 0x80224b <fbpointer+0x1>
     b30:	08 95       	ret

00000b32 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b32:	20 91 4a 22 	lds	r18, 0x224A	; 0x80224a <fbpointer>
     b36:	30 91 4b 22 	lds	r19, 0x224B	; 0x80224b <fbpointer+0x1>
     b3a:	90 e8       	ldi	r25, 0x80	; 128
     b3c:	89 9f       	mul	r24, r25
     b3e:	20 0d       	add	r18, r0
     b40:	31 1d       	adc	r19, r1
     b42:	11 24       	eor	r1, r1
     b44:	f9 01       	movw	r30, r18
     b46:	e6 0f       	add	r30, r22
     b48:	f1 1d       	adc	r31, r1
     b4a:	40 83       	st	Z, r20
     b4c:	08 95       	ret

00000b4e <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b4e:	20 91 4a 22 	lds	r18, 0x224A	; 0x80224a <fbpointer>
     b52:	30 91 4b 22 	lds	r19, 0x224B	; 0x80224b <fbpointer+0x1>
     b56:	90 e8       	ldi	r25, 0x80	; 128
     b58:	89 9f       	mul	r24, r25
     b5a:	20 0d       	add	r18, r0
     b5c:	31 1d       	adc	r19, r1
     b5e:	11 24       	eor	r1, r1
     b60:	f9 01       	movw	r30, r18
     b62:	e6 0f       	add	r30, r22
     b64:	f1 1d       	adc	r31, r1
}
     b66:	80 81       	ld	r24, Z
     b68:	08 95       	ret

00000b6a <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	e4 2f       	mov	r30, r20
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	e8 0f       	add	r30, r24
     b7a:	f1 1d       	adc	r31, r1
     b7c:	e1 38       	cpi	r30, 0x81	; 129
     b7e:	f1 05       	cpc	r31, r1
     b80:	1c f0       	brlt	.+6      	; 0xb88 <gfx_mono_generic_draw_horizontal_line+0x1e>
     b82:	c0 e8       	ldi	r28, 0x80	; 128
     b84:	4c 2f       	mov	r20, r28
     b86:	48 1b       	sub	r20, r24
     b88:	44 23       	and	r20, r20
     b8a:	09 f4       	brne	.+2      	; 0xb8e <gfx_mono_generic_draw_horizontal_line+0x24>
     b8c:	4a c0       	rjmp	.+148    	; 0xc22 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b8e:	d6 2f       	mov	r29, r22
     b90:	d6 95       	lsr	r29
     b92:	d6 95       	lsr	r29
     b94:	d6 95       	lsr	r29
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	98 e0       	ldi	r25, 0x08	; 8
     b9a:	d9 9f       	mul	r29, r25
     b9c:	60 19       	sub	r22, r0
     b9e:	71 09       	sbc	r23, r1
     ba0:	11 24       	eor	r1, r1
     ba2:	e1 e0       	ldi	r30, 0x01	; 1
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	df 01       	movw	r26, r30
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <gfx_mono_generic_draw_horizontal_line+0x44>
     baa:	aa 0f       	add	r26, r26
     bac:	bb 1f       	adc	r27, r27
     bae:	6a 95       	dec	r22
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <gfx_mono_generic_draw_horizontal_line+0x40>
     bb2:	fa 2e       	mov	r15, r26
     bb4:	21 30       	cpi	r18, 0x01	; 1
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <gfx_mono_generic_draw_horizontal_line+0x56>
     bb8:	98 f0       	brcs	.+38     	; 0xbe0 <gfx_mono_generic_draw_horizontal_line+0x76>
     bba:	22 30       	cpi	r18, 0x02	; 2
     bbc:	19 f1       	breq	.+70     	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0x9a>
     bbe:	31 c0       	rjmp	.+98     	; 0xc22 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bc0:	c4 2f       	mov	r28, r20
     bc2:	1f ef       	ldi	r17, 0xFF	; 255
     bc4:	18 0f       	add	r17, r24
     bc6:	01 2f       	mov	r16, r17
     bc8:	0c 0f       	add	r16, r28
     bca:	60 2f       	mov	r22, r16
     bcc:	8d 2f       	mov	r24, r29
     bce:	aa df       	rcall	.-172    	; 0xb24 <gfx_mono_st7565r_get_byte>
     bd0:	4f 2d       	mov	r20, r15
     bd2:	48 2b       	or	r20, r24
     bd4:	60 2f       	mov	r22, r16
     bd6:	8d 2f       	mov	r24, r29
     bd8:	86 de       	rcall	.-756    	; 0x8e6 <gfx_mono_st7565r_put_byte>
     bda:	c1 50       	subi	r28, 0x01	; 1
     bdc:	a1 f7       	brne	.-24     	; 0xbc6 <gfx_mono_generic_draw_horizontal_line+0x5c>
     bde:	21 c0       	rjmp	.+66     	; 0xc22 <gfx_mono_generic_draw_horizontal_line+0xb8>
     be0:	c4 2f       	mov	r28, r20
     be2:	1f ef       	ldi	r17, 0xFF	; 255
     be4:	18 0f       	add	r17, r24
     be6:	fa 2e       	mov	r15, r26
     be8:	f0 94       	com	r15
     bea:	01 2f       	mov	r16, r17
     bec:	0c 0f       	add	r16, r28
     bee:	60 2f       	mov	r22, r16
     bf0:	8d 2f       	mov	r24, r29
     bf2:	98 df       	rcall	.-208    	; 0xb24 <gfx_mono_st7565r_get_byte>
     bf4:	4f 2d       	mov	r20, r15
     bf6:	48 23       	and	r20, r24
     bf8:	60 2f       	mov	r22, r16
     bfa:	8d 2f       	mov	r24, r29
     bfc:	74 de       	rcall	.-792    	; 0x8e6 <gfx_mono_st7565r_put_byte>
     bfe:	c1 50       	subi	r28, 0x01	; 1
     c00:	a1 f7       	brne	.-24     	; 0xbea <gfx_mono_generic_draw_horizontal_line+0x80>
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <gfx_mono_generic_draw_horizontal_line+0xb8>
     c04:	c4 2f       	mov	r28, r20
     c06:	1f ef       	ldi	r17, 0xFF	; 255
     c08:	18 0f       	add	r17, r24
     c0a:	01 2f       	mov	r16, r17
     c0c:	0c 0f       	add	r16, r28
     c0e:	60 2f       	mov	r22, r16
     c10:	8d 2f       	mov	r24, r29
     c12:	88 df       	rcall	.-240    	; 0xb24 <gfx_mono_st7565r_get_byte>
     c14:	4f 2d       	mov	r20, r15
     c16:	48 27       	eor	r20, r24
     c18:	60 2f       	mov	r22, r16
     c1a:	8d 2f       	mov	r24, r29
     c1c:	64 de       	rcall	.-824    	; 0x8e6 <gfx_mono_st7565r_put_byte>
     c1e:	c1 50       	subi	r28, 0x01	; 1
     c20:	a1 f7       	brne	.-24     	; 0xc0a <gfx_mono_generic_draw_horizontal_line+0xa0>
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	08 95       	ret

00000c2e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
	if (height == 0) {
     c38:	22 23       	and	r18, r18
     c3a:	69 f0       	breq	.+26     	; 0xc56 <gfx_mono_generic_draw_filled_rect+0x28>
     c3c:	f4 2e       	mov	r15, r20
     c3e:	18 2f       	mov	r17, r24
     c40:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c42:	df ef       	ldi	r29, 0xFF	; 255
     c44:	d6 0f       	add	r29, r22
     c46:	6d 2f       	mov	r22, r29
     c48:	6c 0f       	add	r22, r28
     c4a:	20 2f       	mov	r18, r16
     c4c:	4f 2d       	mov	r20, r15
     c4e:	81 2f       	mov	r24, r17
     c50:	8c df       	rcall	.-232    	; 0xb6a <gfx_mono_generic_draw_horizontal_line>
     c52:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c54:	c1 f7       	brne	.-16     	; 0xc46 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	08 95       	ret

00000c62 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	c8 2f       	mov	r28, r24
     c78:	e6 2e       	mov	r14, r22
     c7a:	b4 2e       	mov	r11, r20
     c7c:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	f9 01       	movw	r30, r18
     c82:	24 81       	ldd	r18, Z+4	; 0x04
     c84:	43 81       	ldd	r20, Z+3	; 0x03
     c86:	6b 2d       	mov	r22, r11
     c88:	8e 2d       	mov	r24, r14
     c8a:	d1 df       	rcall	.-94     	; 0xc2e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c8c:	f6 01       	movw	r30, r12
     c8e:	80 81       	ld	r24, Z
     c90:	81 11       	cpse	r24, r1
     c92:	39 c0       	rjmp	.+114    	; 0xd06 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c94:	83 81       	ldd	r24, Z+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	26 95       	lsr	r18
     c9a:	26 95       	lsr	r18
     c9c:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c9e:	87 70       	andi	r24, 0x07	; 7
     ca0:	09 f0       	breq	.+2      	; 0xca4 <gfx_mono_draw_char+0x42>
		char_row_size++;
     ca2:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     ca4:	f6 01       	movw	r30, r12
     ca6:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     ca8:	8c 2f       	mov	r24, r28
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	35 81       	ldd	r19, Z+5	; 0x05
     cae:	83 1b       	sub	r24, r19
     cb0:	91 09       	sbc	r25, r1
     cb2:	2a 9d       	mul	r18, r10
     cb4:	90 01       	movw	r18, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	82 9f       	mul	r24, r18
     cba:	a0 01       	movw	r20, r0
     cbc:	83 9f       	mul	r24, r19
     cbe:	50 0d       	add	r21, r0
     cc0:	92 9f       	mul	r25, r18
     cc2:	50 0d       	add	r21, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	01 81       	ldd	r16, Z+1	; 0x01
     cc8:	12 81       	ldd	r17, Z+2	; 0x02
     cca:	04 0f       	add	r16, r20
     ccc:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     cce:	f6 01       	movw	r30, r12
     cd0:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     cd2:	ff 20       	and	r15, r15
     cd4:	a1 f0       	breq	.+40     	; 0xcfe <gfx_mono_draw_char+0x9c>
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	c0 e0       	ldi	r28, 0x00	; 0
     cda:	8e 2d       	mov	r24, r14
     cdc:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cde:	9c 2f       	mov	r25, r28
     ce0:	97 70       	andi	r25, 0x07	; 7
     ce2:	21 f4       	brne	.+8      	; 0xcec <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     ce4:	f8 01       	movw	r30, r16
     ce6:	d4 91       	lpm	r29, Z
				glyph_data++;
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cec:	dd 23       	and	r29, r29
     cee:	1c f4       	brge	.+6      	; 0xcf6 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	6b 2d       	mov	r22, r11
     cf4:	e1 de       	rcall	.-574    	; 0xab8 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     cf6:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     cf8:	cf 5f       	subi	r28, 0xFF	; 255
     cfa:	fc 12       	cpse	r15, r28
     cfc:	ee cf       	rjmp	.-36     	; 0xcda <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     cfe:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     d00:	aa 94       	dec	r10
	} while (rows_left > 0);
     d02:	a1 10       	cpse	r10, r1
     d04:	e4 cf       	rjmp	.-56     	; 0xcce <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	08 95       	ret

00000d1c <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	d6 2e       	mov	r13, r22
     d2c:	04 2f       	mov	r16, r20
     d2e:	79 01       	movw	r14, r18
     d30:	ec 01       	movw	r28, r24
     d32:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d34:	89 91       	ld	r24, Y+
     d36:	8a 30       	cpi	r24, 0x0A	; 10
     d38:	31 f4       	brne	.+12     	; 0xd46 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d3a:	f7 01       	movw	r30, r14
     d3c:	84 81       	ldd	r24, Z+4	; 0x04
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d42:	1d 2d       	mov	r17, r13
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d46:	8d 30       	cpi	r24, 0x0D	; 13
     d48:	39 f0       	breq	.+14     	; 0xd58 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d4a:	97 01       	movw	r18, r14
     d4c:	40 2f       	mov	r20, r16
     d4e:	61 2f       	mov	r22, r17
     d50:	88 df       	rcall	.-240    	; 0xc62 <gfx_mono_draw_char>
			x += font->width;
     d52:	f7 01       	movw	r30, r14
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d58:	88 81       	ld	r24, Y
     d5a:	81 11       	cpse	r24, r1
     d5c:	eb cf       	rjmp	.-42     	; 0xd34 <gfx_mono_draw_string+0x18>
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	08 95       	ret

00000d6e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d78:	c6 2f       	mov	r28, r22
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
     d7c:	de 01       	movw	r26, r28
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <ioport_configure_port_pin+0x18>
     d82:	b5 95       	asr	r27
     d84:	a7 95       	ror	r26
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <ioport_configure_port_pin+0x14>
     d8a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d8c:	50 8b       	std	Z+16, r21	; 0x10
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d94:	28 30       	cpi	r18, 0x08	; 8
     d96:	31 05       	cpc	r19, r1
     d98:	89 f7       	brne	.-30     	; 0xd7c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d9a:	40 ff       	sbrs	r20, 0
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d9e:	41 ff       	sbrs	r20, 1
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     da2:	fc 01       	movw	r30, r24
     da4:	65 83       	std	Z+5, r22	; 0x05
     da6:	02 c0       	rjmp	.+4      	; 0xdac <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     da8:	fc 01       	movw	r30, r24
     daa:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     dac:	fc 01       	movw	r30, r24
     dae:	61 83       	std	Z+1, r22	; 0x01
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     db2:	fc 01       	movw	r30, r24
     db4:	62 83       	std	Z+2, r22	; 0x02
	}
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     dbc:	80 3a       	cpi	r24, 0xA0	; 160
     dbe:	28 e0       	ldi	r18, 0x08	; 8
     dc0:	92 07       	cpc	r25, r18
     dc2:	21 f4       	brne	.+8      	; 0xdcc <usart_spi_init+0x10>
     dc4:	60 e1       	ldi	r22, 0x10	; 16
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	63 cd       	rjmp	.-1338   	; 0x890 <sysclk_enable_module>
     dca:	08 95       	ret
     dcc:	80 3b       	cpi	r24, 0xB0	; 176
     dce:	28 e0       	ldi	r18, 0x08	; 8
     dd0:	92 07       	cpc	r25, r18
     dd2:	21 f4       	brne	.+8      	; 0xddc <usart_spi_init+0x20>
     dd4:	60 e2       	ldi	r22, 0x20	; 32
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	5b cd       	rjmp	.-1354   	; 0x890 <sysclk_enable_module>
     dda:	08 95       	ret
     ddc:	80 3a       	cpi	r24, 0xA0	; 160
     dde:	29 e0       	ldi	r18, 0x09	; 9
     de0:	92 07       	cpc	r25, r18
     de2:	21 f4       	brne	.+8      	; 0xdec <usart_spi_init+0x30>
     de4:	60 e1       	ldi	r22, 0x10	; 16
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	53 cd       	rjmp	.-1370   	; 0x890 <sysclk_enable_module>
     dea:	08 95       	ret
     dec:	80 3b       	cpi	r24, 0xB0	; 176
     dee:	29 e0       	ldi	r18, 0x09	; 9
     df0:	92 07       	cpc	r25, r18
     df2:	21 f4       	brne	.+8      	; 0xdfc <usart_spi_init+0x40>
     df4:	60 e2       	ldi	r22, 0x20	; 32
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	4b cd       	rjmp	.-1386   	; 0x890 <sysclk_enable_module>
     dfa:	08 95       	ret
     dfc:	80 3a       	cpi	r24, 0xA0	; 160
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	92 07       	cpc	r25, r18
     e02:	21 f4       	brne	.+8      	; 0xe0c <usart_spi_init+0x50>
     e04:	60 e1       	ldi	r22, 0x10	; 16
     e06:	85 e0       	ldi	r24, 0x05	; 5
     e08:	43 cd       	rjmp	.-1402   	; 0x890 <sysclk_enable_module>
     e0a:	08 95       	ret
     e0c:	80 3a       	cpi	r24, 0xA0	; 160
     e0e:	9b 40       	sbci	r25, 0x0B	; 11
     e10:	19 f4       	brne	.+6      	; 0xe18 <usart_spi_init+0x5c>
     e12:	60 e1       	ldi	r22, 0x10	; 16
     e14:	86 e0       	ldi	r24, 0x06	; 6
     e16:	3c cd       	rjmp	.-1416   	; 0x890 <sysclk_enable_module>
     e18:	08 95       	ret

00000e1a <usart_spi_setup_device>:
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	00 d0       	rcall	.+0      	; 0xe24 <usart_spi_setup_device+0xa>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <usart_spi_setup_device+0xc>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	09 83       	std	Y+1, r16	; 0x01
     e2c:	1a 83       	std	Y+2, r17	; 0x02
     e2e:	2b 83       	std	Y+3, r18	; 0x03
     e30:	3c 83       	std	Y+4, r19	; 0x04
     e32:	4d 83       	std	Y+5, r20	; 0x05
     e34:	1e 82       	std	Y+6, r1	; 0x06
     e36:	be 01       	movw	r22, r28
     e38:	6f 5f       	subi	r22, 0xFF	; 255
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <usart_init_spi>
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e50:	fb 01       	movw	r30, r22
     e52:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e54:	e8 2f       	mov	r30, r24
     e56:	e6 95       	lsr	r30
     e58:	e6 95       	lsr	r30
     e5a:	e6 95       	lsr	r30
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	e4 9f       	mul	r30, r20
     e60:	f0 01       	movw	r30, r0
     e62:	11 24       	eor	r1, r1
     e64:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e66:	87 70       	andi	r24, 0x07	; 7
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <usart_spi_select_device+0x24>
     e70:	44 0f       	add	r20, r20
     e72:	55 1f       	adc	r21, r21
     e74:	8a 95       	dec	r24
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e78:	46 83       	std	Z+6, r20	; 0x06
     e7a:	08 95       	ret

00000e7c <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e7c:	fb 01       	movw	r30, r22
     e7e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e80:	e8 2f       	mov	r30, r24
     e82:	e6 95       	lsr	r30
     e84:	e6 95       	lsr	r30
     e86:	e6 95       	lsr	r30
     e88:	40 e2       	ldi	r20, 0x20	; 32
     e8a:	e4 9f       	mul	r30, r20
     e8c:	f0 01       	movw	r30, r0
     e8e:	11 24       	eor	r1, r1
     e90:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e92:	87 70       	andi	r24, 0x07	; 7
     e94:	21 e0       	ldi	r18, 0x01	; 1
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <usart_spi_deselect_device+0x24>
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	8a 95       	dec	r24
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     ea4:	45 83       	std	Z+5, r20	; 0x05
     ea6:	08 95       	ret

00000ea8 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	80 ee       	ldi	r24, 0xE0	; 224
     eb0:	97 e0       	ldi	r25, 0x07	; 7
     eb2:	5d df       	rcall	.-326    	; 0xd6e <ioport_configure_port_pin>
     eb4:	43 e0       	ldi	r20, 0x03	; 3
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	80 ee       	ldi	r24, 0xE0	; 224
     ebc:	97 e0       	ldi	r25, 0x07	; 7
     ebe:	57 df       	rcall	.-338    	; 0xd6e <ioport_configure_port_pin>
     ec0:	43 e0       	ldi	r20, 0x03	; 3
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	60 e1       	ldi	r22, 0x10	; 16
     ec6:	80 e6       	ldi	r24, 0x60	; 96
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	51 df       	rcall	.-350    	; 0xd6e <ioport_configure_port_pin>
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	50 e4       	ldi	r21, 0x40	; 64
     ed0:	60 e2       	ldi	r22, 0x20	; 32
     ed2:	80 e6       	ldi	r24, 0x60	; 96
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	4b df       	rcall	.-362    	; 0xd6e <ioport_configure_port_pin>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	5b e1       	ldi	r21, 0x1B	; 27
     edc:	60 e2       	ldi	r22, 0x20	; 32
     ede:	80 e8       	ldi	r24, 0x80	; 128
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	45 df       	rcall	.-374    	; 0xd6e <ioport_configure_port_pin>
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	5b e1       	ldi	r21, 0x1B	; 27
     ee8:	62 e0       	ldi	r22, 0x02	; 2
     eea:	80 ea       	ldi	r24, 0xA0	; 160
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	3f df       	rcall	.-386    	; 0xd6e <ioport_configure_port_pin>
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	5b e1       	ldi	r21, 0x1B	; 27
     ef4:	64 e0       	ldi	r22, 0x04	; 4
     ef6:	80 ea       	ldi	r24, 0xA0	; 160
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	39 df       	rcall	.-398    	; 0xd6e <ioport_configure_port_pin>
     efc:	43 e0       	ldi	r20, 0x03	; 3
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	62 e0       	ldi	r22, 0x02	; 2
     f02:	80 e6       	ldi	r24, 0x60	; 96
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	33 df       	rcall	.-410    	; 0xd6e <ioport_configure_port_pin>
     f08:	43 e0       	ldi	r20, 0x03	; 3
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	68 e0       	ldi	r22, 0x08	; 8
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	2d df       	rcall	.-422    	; 0xd6e <ioport_configure_port_pin>
     f14:	43 e0       	ldi	r20, 0x03	; 3
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	68 e0       	ldi	r22, 0x08	; 8
     f1a:	80 ea       	ldi	r24, 0xA0	; 160
     f1c:	96 e0       	ldi	r25, 0x06	; 6
     f1e:	27 df       	rcall	.-434    	; 0xd6e <ioport_configure_port_pin>
     f20:	43 e0       	ldi	r20, 0x03	; 3
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	80 e6       	ldi	r24, 0x60	; 96
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	21 df       	rcall	.-446    	; 0xd6e <ioport_configure_port_pin>
     f2c:	43 e0       	ldi	r20, 0x03	; 3
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	68 e0       	ldi	r22, 0x08	; 8
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	1b df       	rcall	.-458    	; 0xd6e <ioport_configure_port_pin>
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	60 e1       	ldi	r22, 0x10	; 16
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	96 e0       	ldi	r25, 0x06	; 6
     f42:	15 df       	rcall	.-470    	; 0xd6e <ioport_configure_port_pin>
     f44:	43 e0       	ldi	r20, 0x03	; 3
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	62 e0       	ldi	r22, 0x02	; 2
     f4a:	80 e6       	ldi	r24, 0x60	; 96
     f4c:	96 e0       	ldi	r25, 0x06	; 6
     f4e:	0f df       	rcall	.-482    	; 0xd6e <ioport_configure_port_pin>
     f50:	43 e0       	ldi	r20, 0x03	; 3
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	68 e0       	ldi	r22, 0x08	; 8
     f56:	80 e6       	ldi	r24, 0x60	; 96
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	09 df       	rcall	.-494    	; 0xd6e <ioport_configure_port_pin>
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	64 e0       	ldi	r22, 0x04	; 4
     f62:	80 e6       	ldi	r24, 0x60	; 96
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	03 df       	rcall	.-506    	; 0xd6e <ioport_configure_port_pin>
     f68:	43 e0       	ldi	r20, 0x03	; 3
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	60 e1       	ldi	r22, 0x10	; 16
     f6e:	80 ea       	ldi	r24, 0xA0	; 160
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	fd de       	rcall	.-518    	; 0xd6e <ioport_configure_port_pin>
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	96 e0       	ldi	r25, 0x06	; 6
     f7e:	f7 de       	rcall	.-530    	; 0xd6e <ioport_configure_port_pin>
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	64 e0       	ldi	r22, 0x04	; 4
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	96 e0       	ldi	r25, 0x06	; 6
     f8a:	f1 de       	rcall	.-542    	; 0xd6e <ioport_configure_port_pin>
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	80 e2       	ldi	r24, 0x20	; 32
     f94:	96 e0       	ldi	r25, 0x06	; 6
     f96:	eb de       	rcall	.-554    	; 0xd6e <ioport_configure_port_pin>
     f98:	43 e0       	ldi	r20, 0x03	; 3
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	68 e0       	ldi	r22, 0x08	; 8
     f9e:	80 e4       	ldi	r24, 0x40	; 64
     fa0:	96 e0       	ldi	r25, 0x06	; 6
     fa2:	e5 de       	rcall	.-566    	; 0xd6e <ioport_configure_port_pin>
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	64 e0       	ldi	r22, 0x04	; 4
     faa:	80 e4       	ldi	r24, 0x40	; 64
     fac:	96 e0       	ldi	r25, 0x06	; 6
     fae:	df de       	rcall	.-578    	; 0xd6e <ioport_configure_port_pin>
     fb0:	43 e0       	ldi	r20, 0x03	; 3
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	80 e6       	ldi	r24, 0x60	; 96
     fb8:	96 e0       	ldi	r25, 0x06	; 6
     fba:	d9 de       	rcall	.-590    	; 0xd6e <ioport_configure_port_pin>
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	80 e6       	ldi	r24, 0x60	; 96
     fc4:	96 e0       	ldi	r25, 0x06	; 6
     fc6:	d3 de       	rcall	.-602    	; 0xd6e <ioport_configure_port_pin>
     fc8:	43 e0       	ldi	r20, 0x03	; 3
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	68 e0       	ldi	r22, 0x08	; 8
     fce:	80 e8       	ldi	r24, 0x80	; 128
     fd0:	96 e0       	ldi	r25, 0x06	; 6
     fd2:	cd de       	rcall	.-614    	; 0xd6e <ioport_configure_port_pin>
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	64 e0       	ldi	r22, 0x04	; 4
     fda:	80 e8       	ldi	r24, 0x80	; 128
     fdc:	96 e0       	ldi	r25, 0x06	; 6
     fde:	c7 ce       	rjmp	.-626    	; 0xd6e <ioport_configure_port_pin>
     fe0:	08 95       	ret

00000fe2 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     fe2:	81 15       	cp	r24, r1
     fe4:	22 e0       	ldi	r18, 0x02	; 2
     fe6:	92 07       	cpc	r25, r18
     fe8:	61 f4       	brne	.+24     	; 0x1002 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     fea:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <adca_enable_count>
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	98 0f       	add	r25, r24
     ff2:	90 93 4d 22 	sts	0x224D, r25	; 0x80224d <adca_enable_count>
     ff6:	81 11       	cpse	r24, r1
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	48 cc       	rjmp	.-1904   	; 0x890 <sysclk_enable_module>
    1000:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1002:	80 34       	cpi	r24, 0x40	; 64
    1004:	92 40       	sbci	r25, 0x02	; 2
    1006:	59 f4       	brne	.+22     	; 0x101e <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    1008:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <adcb_enable_count>
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	98 0f       	add	r25, r24
    1010:	90 93 4c 22 	sts	0x224C, r25	; 0x80224c <adcb_enable_count>
    1014:	81 11       	cpse	r24, r1
    1016:	03 c0       	rjmp	.+6      	; 0x101e <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	39 cc       	rjmp	.-1934   	; 0x890 <sysclk_enable_module>
    101e:	08 95       	ret

00001020 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1020:	81 15       	cp	r24, r1
    1022:	22 e0       	ldi	r18, 0x02	; 2
    1024:	92 07       	cpc	r25, r18
    1026:	59 f4       	brne	.+22     	; 0x103e <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1028:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <adca_enable_count>
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	80 93 4d 22 	sts	0x224D, r24	; 0x80224d <adca_enable_count>
    1032:	81 11       	cpse	r24, r1
    1034:	11 c0       	rjmp	.+34     	; 0x1058 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	40 cc       	rjmp	.-1920   	; 0x8bc <sysclk_disable_module>
    103c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    103e:	80 34       	cpi	r24, 0x40	; 64
    1040:	92 40       	sbci	r25, 0x02	; 2
    1042:	51 f4       	brne	.+20     	; 0x1058 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1044:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <adcb_enable_count>
    1048:	81 50       	subi	r24, 0x01	; 1
    104a:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <adcb_enable_count>
    104e:	81 11       	cpse	r24, r1
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	32 cc       	rjmp	.-1948   	; 0x8bc <sysclk_disable_module>
    1058:	08 95       	ret

0000105a <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	1f 92       	push	r1
    1066:	1f 92       	push	r1
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    106e:	8f b7       	in	r24, 0x3f	; 63
    1070:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1072:	f8 94       	cli
	return flags;
    1074:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1076:	c7 01       	movw	r24, r14
    1078:	b4 df       	rcall	.-152    	; 0xfe2 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    107a:	f7 01       	movw	r30, r14
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1082:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1084:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <sleepmgr_locks+0x1>
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	09 f4       	brne	.+2      	; 0x108e <adc_enable+0x34>
    108c:	ff cf       	rjmp	.-2      	; 0x108c <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    108e:	8f b7       	in	r24, 0x3f	; 63
    1090:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1092:	f8 94       	cli
	return flags;
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1096:	e8 e1       	ldi	r30, 0x18	; 24
    1098:	f3 e2       	ldi	r31, 0x23	; 35
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10a0:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	08 95       	ret

000010b2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	0b b6       	in	r0, 0x3b	; 59
    10be:	0f 92       	push	r0
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    10d8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    10dc:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    10e0:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
    10e4:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	19 95       	eicall
}
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0b be       	out	0x3b, r0	; 59
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	0b b6       	in	r0, 0x3b	; 59
    1122:	0f 92       	push	r0
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    113c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1140:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1144:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
    1148:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
    114c:	62 e0       	ldi	r22, 0x02	; 2
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	19 95       	eicall
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0b be       	out	0x3b, r0	; 59
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	0b b6       	in	r0, 0x3b	; 59
    1186:	0f 92       	push	r0
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    11a0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    11a4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    11a8:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
    11ac:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
    11b0:	64 e0       	ldi	r22, 0x04	; 4
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	19 95       	eicall
}
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0b be       	out	0x3b, r0	; 59
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	0b b6       	in	r0, 0x3b	; 59
    11ea:	0f 92       	push	r0
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1204:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1208:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    120c:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
    1210:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
    1214:	68 e0       	ldi	r22, 0x08	; 8
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	19 95       	eicall
}
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0b be       	out	0x3b, r0	; 59
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	0b b6       	in	r0, 0x3b	; 59
    124e:	0f 92       	push	r0
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1268:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    126c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    1270:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    1274:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	80 e4       	ldi	r24, 0x40	; 64
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	19 95       	eicall
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0b be       	out	0x3b, r0	; 59
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	0b b6       	in	r0, 0x3b	; 59
    12b2:	0f 92       	push	r0
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    12cc:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    12d0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    12d4:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    12d8:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    12dc:	62 e0       	ldi	r22, 0x02	; 2
    12de:	80 e4       	ldi	r24, 0x40	; 64
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	19 95       	eicall
}
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0b be       	out	0x3b, r0	; 59
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1330:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1334:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1338:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    133c:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    1340:	64 e0       	ldi	r22, 0x04	; 4
    1342:	80 e4       	ldi	r24, 0x40	; 64
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	19 95       	eicall
}
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0b be       	out	0x3b, r0	; 59
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	0b b6       	in	r0, 0x3b	; 59
    137a:	0f 92       	push	r0
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1394:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1398:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    139c:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    13a0:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    13a4:	68 e0       	ldi	r22, 0x08	; 8
    13a6:	80 e4       	ldi	r24, 0x40	; 64
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	19 95       	eicall
}
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0b be       	out	0x3b, r0	; 59
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	0f 90       	pop	r0
    13ce:	1f 90       	pop	r1
    13d0:	18 95       	reti

000013d2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    13d2:	bf 92       	push	r11
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8c 01       	movw	r16, r24
    13ec:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    13ee:	81 15       	cp	r24, r1
    13f0:	22 e0       	ldi	r18, 0x02	; 2
    13f2:	92 07       	cpc	r25, r18
    13f4:	71 f4       	brne	.+28     	; 0x1412 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    13f6:	61 e2       	ldi	r22, 0x21	; 33
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	1f d1       	rcall	.+574    	; 0x163c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    13fe:	c8 2e       	mov	r12, r24
    1400:	d1 2c       	mov	r13, r1
    1402:	60 e2       	ldi	r22, 0x20	; 32
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	19 d1       	rcall	.+562    	; 0x163c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    140a:	dc 2c       	mov	r13, r12
    140c:	cc 24       	eor	r12, r12
    140e:	c8 2a       	or	r12, r24
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1412:	80 34       	cpi	r24, 0x40	; 64
    1414:	92 40       	sbci	r25, 0x02	; 2
    1416:	c1 f5       	brne	.+112    	; 0x1488 <adc_write_configuration+0xb6>
    1418:	65 e2       	ldi	r22, 0x25	; 37
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	0e d1       	rcall	.+540    	; 0x163c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1420:	c8 2e       	mov	r12, r24
    1422:	d1 2c       	mov	r13, r1
    1424:	64 e2       	ldi	r22, 0x24	; 36
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	08 d1       	rcall	.+528    	; 0x163c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    142c:	dc 2c       	mov	r13, r12
    142e:	cc 24       	eor	r12, r12
    1430:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1432:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1434:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    1436:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1438:	b9 80       	ldd	r11, Y+1	; 0x01
    143a:	c8 01       	movw	r24, r16
    143c:	d2 dd       	rcall	.-1116   	; 0xfe2 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    143e:	f8 01       	movw	r30, r16
    1440:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	90 83       	st	Z, r25
	adc->CAL = cal;
    1446:	c4 86       	std	Z+12, r12	; 0x0c
    1448:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    144a:	f7 01       	movw	r30, r14
    144c:	25 81       	ldd	r18, Z+5	; 0x05
    144e:	36 81       	ldd	r19, Z+6	; 0x06
    1450:	f8 01       	movw	r30, r16
    1452:	20 8f       	std	Z+24, r18	; 0x18
    1454:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1456:	f7 01       	movw	r30, r14
    1458:	92 81       	ldd	r25, Z+2	; 0x02
    145a:	f8 01       	movw	r30, r16
    145c:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    145e:	f7 01       	movw	r30, r14
    1460:	94 81       	ldd	r25, Z+4	; 0x04
    1462:	f8 01       	movw	r30, r16
    1464:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1466:	f7 01       	movw	r30, r14
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	f8 01       	movw	r30, r16
    146c:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    146e:	f7 01       	movw	r30, r14
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	f8 01       	movw	r30, r16
    1474:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	f7 01       	movw	r30, r14
    147a:	90 81       	ld	r25, Z
    147c:	89 2b       	or	r24, r25
    147e:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1480:	80 83       	st	Z, r24
    1482:	c8 01       	movw	r24, r16
    1484:	cd dd       	rcall	.-1126   	; 0x1020 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1486:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    1488:	0f 90       	pop	r0
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	08 95       	ret

0000149e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	1f 92       	push	r1
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8c 01       	movw	r16, r24
    14b4:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14b6:	8f b7       	in	r24, 0x3f	; 63
    14b8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14ba:	f8 94       	cli
	return flags;
    14bc:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    14be:	c8 01       	movw	r24, r16
    14c0:	90 dd       	rcall	.-1248   	; 0xfe2 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    14c2:	f8 01       	movw	r30, r16
    14c4:	80 81       	ld	r24, Z
    14c6:	80 7c       	andi	r24, 0xC0	; 192
    14c8:	f7 01       	movw	r30, r14
    14ca:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 8d       	ldd	r24, Z+24	; 0x18
    14d0:	91 8d       	ldd	r25, Z+25	; 0x19
    14d2:	f7 01       	movw	r30, r14
    14d4:	85 83       	std	Z+5, r24	; 0x05
    14d6:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    14d8:	f8 01       	movw	r30, r16
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	f7 01       	movw	r30, r14
    14de:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    14e0:	f8 01       	movw	r30, r16
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	f7 01       	movw	r30, r14
    14e6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    14e8:	f8 01       	movw	r30, r16
    14ea:	83 81       	ldd	r24, Z+3	; 0x03
    14ec:	f7 01       	movw	r30, r14
    14ee:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    14f0:	f8 01       	movw	r30, r16
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
    14f4:	f7 01       	movw	r30, r14
    14f6:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    14f8:	c8 01       	movw	r24, r16
    14fa:	92 dd       	rcall	.-1244   	; 0x1020 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14fc:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	08 95       	ret

00001510 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	6c 01       	movw	r12, r24
    152c:	b6 2e       	mov	r11, r22
    152e:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1530:	86 2f       	mov	r24, r22
    1532:	83 70       	andi	r24, 0x03	; 3
    1534:	29 f4       	brne	.+10     	; 0x1540 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1536:	96 2f       	mov	r25, r22
    1538:	96 95       	lsr	r25
    153a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1540:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1542:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1544:	90 ff       	sbrs	r25, 0
		index++;
    1546:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1548:	86 01       	movw	r16, r12
    154a:	00 5e       	subi	r16, 0xE0	; 224
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	98 e0       	ldi	r25, 0x08	; 8
    1550:	89 9f       	mul	r24, r25
    1552:	00 0d       	add	r16, r0
    1554:	11 1d       	adc	r17, r1
    1556:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1558:	8f b7       	in	r24, 0x3f	; 63
    155a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    155c:	f8 94       	cli
	return flags;
    155e:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1560:	c6 01       	movw	r24, r12
    1562:	3f dd       	rcall	.-1410   	; 0xfe2 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1564:	f7 01       	movw	r30, r14
    1566:	80 81       	ld	r24, Z
    1568:	f8 01       	movw	r30, r16
    156a:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    156c:	f7 01       	movw	r30, r14
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	f8 01       	movw	r30, r16
    1572:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1574:	f7 01       	movw	r30, r14
    1576:	81 81       	ldd	r24, Z+1	; 0x01
    1578:	f8 01       	movw	r30, r16
    157a:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    157c:	b0 fe       	sbrs	r11, 0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1580:	f7 01       	movw	r30, r14
    1582:	83 81       	ldd	r24, Z+3	; 0x03
    1584:	f8 01       	movw	r30, r16
    1586:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1588:	c6 01       	movw	r24, r12
    158a:	4a dd       	rcall	.-1388   	; 0x1020 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    158c:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    158e:	0f 90       	pop	r0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	08 95       	ret

000015a6 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	1f 92       	push	r1
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	6c 01       	movw	r12, r24
    15c2:	b6 2e       	mov	r11, r22
    15c4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    15c6:	86 2f       	mov	r24, r22
    15c8:	83 70       	andi	r24, 0x03	; 3
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    15cc:	96 2f       	mov	r25, r22
    15ce:	96 95       	lsr	r25
    15d0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    15d6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    15da:	90 ff       	sbrs	r25, 0
		index++;
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    15de:	86 01       	movw	r16, r12
    15e0:	00 5e       	subi	r16, 0xE0	; 224
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	98 e0       	ldi	r25, 0x08	; 8
    15e6:	89 9f       	mul	r24, r25
    15e8:	00 0d       	add	r16, r0
    15ea:	11 1d       	adc	r17, r1
    15ec:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15ee:	8f b7       	in	r24, 0x3f	; 63
    15f0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15f2:	f8 94       	cli
	return flags;
    15f4:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    15f6:	c6 01       	movw	r24, r12
    15f8:	f4 dc       	rcall	.-1560   	; 0xfe2 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 81       	ld	r24, Z
    15fe:	f7 01       	movw	r30, r14
    1600:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1602:	f8 01       	movw	r30, r16
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	f7 01       	movw	r30, r14
    1608:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    160a:	f8 01       	movw	r30, r16
    160c:	81 81       	ldd	r24, Z+1	; 0x01
    160e:	f7 01       	movw	r30, r14
    1610:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1612:	b0 fe       	sbrs	r11, 0
    1614:	04 c0       	rjmp	.+8      	; 0x161e <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1616:	f8 01       	movw	r30, r16
    1618:	86 81       	ldd	r24, Z+6	; 0x06
    161a:	f7 01       	movw	r30, r14
    161c:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    161e:	c6 01       	movw	r24, r12
    1620:	ff dc       	rcall	.-1538   	; 0x1020 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1622:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	08 95       	ret

0000163c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    163c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1640:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1642:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1644:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1648:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    164a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    164e:	08 95       	ret

00001650 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	0b b6       	in	r0, 0x3b	; 59
    165c:	0f 92       	push	r0
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
    1676:	e0 91 94 22 	lds	r30, 0x2294	; 0x802294 <tc_tcc0_ovf_callback>
    167a:	f0 91 95 22 	lds	r31, 0x2295	; 0x802295 <tc_tcc0_ovf_callback+0x1>
    167e:	30 97       	sbiw	r30, 0x00	; 0
    1680:	09 f0       	breq	.+2      	; 0x1684 <__vector_14+0x34>
    1682:	19 95       	eicall
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0b be       	out	0x3b, r0	; 59
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <__vector_15>:
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	0b b6       	in	r0, 0x3b	; 59
    16b6:	0f 92       	push	r0
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	e0 91 92 22 	lds	r30, 0x2292	; 0x802292 <tc_tcc0_err_callback>
    16d4:	f0 91 93 22 	lds	r31, 0x2293	; 0x802293 <tc_tcc0_err_callback+0x1>
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_15+0x34>
    16dc:	19 95       	eicall
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0b be       	out	0x3b, r0	; 59
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_16>:
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	0b b6       	in	r0, 0x3b	; 59
    1710:	0f 92       	push	r0
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	e0 91 90 22 	lds	r30, 0x2290	; 0x802290 <tc_tcc0_cca_callback>
    172e:	f0 91 91 22 	lds	r31, 0x2291	; 0x802291 <tc_tcc0_cca_callback+0x1>
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	09 f0       	breq	.+2      	; 0x1738 <__vector_16+0x34>
    1736:	19 95       	eicall
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	bf 91       	pop	r27
    173e:	af 91       	pop	r26
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	7f 91       	pop	r23
    1746:	6f 91       	pop	r22
    1748:	5f 91       	pop	r21
    174a:	4f 91       	pop	r20
    174c:	3f 91       	pop	r19
    174e:	2f 91       	pop	r18
    1750:	0f 90       	pop	r0
    1752:	0b be       	out	0x3b, r0	; 59
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <__vector_17>:
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	0b b6       	in	r0, 0x3b	; 59
    176a:	0f 92       	push	r0
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
    1784:	e0 91 8e 22 	lds	r30, 0x228E	; 0x80228e <tc_tcc0_ccb_callback>
    1788:	f0 91 8f 22 	lds	r31, 0x228F	; 0x80228f <tc_tcc0_ccb_callback+0x1>
    178c:	30 97       	sbiw	r30, 0x00	; 0
    178e:	09 f0       	breq	.+2      	; 0x1792 <__vector_17+0x34>
    1790:	19 95       	eicall
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0b be       	out	0x3b, r0	; 59
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_18>:
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	0b b6       	in	r0, 0x3b	; 59
    17c4:	0f 92       	push	r0
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <tc_tcc0_ccc_callback>
    17e2:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <tc_tcc0_ccc_callback+0x1>
    17e6:	30 97       	sbiw	r30, 0x00	; 0
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__vector_18+0x34>
    17ea:	19 95       	eicall
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0b be       	out	0x3b, r0	; 59
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <__vector_19>:
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	0b b6       	in	r0, 0x3b	; 59
    181e:	0f 92       	push	r0
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
    1838:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <tc_tcc0_ccd_callback>
    183c:	f0 91 8b 22 	lds	r31, 0x228B	; 0x80228b <tc_tcc0_ccd_callback+0x1>
    1840:	30 97       	sbiw	r30, 0x00	; 0
    1842:	09 f0       	breq	.+2      	; 0x1846 <__vector_19+0x34>
    1844:	19 95       	eicall
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0b be       	out	0x3b, r0	; 59
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <__vector_20>:
    186c:	1f 92       	push	r1
    186e:	0f 92       	push	r0
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	0f 92       	push	r0
    1874:	11 24       	eor	r1, r1
    1876:	0b b6       	in	r0, 0x3b	; 59
    1878:	0f 92       	push	r0
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <tc_tcc1_ovf_callback>
    1896:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <tc_tcc1_ovf_callback+0x1>
    189a:	30 97       	sbiw	r30, 0x00	; 0
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__vector_20+0x34>
    189e:	19 95       	eicall
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0b be       	out	0x3b, r0	; 59
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	0f 90       	pop	r0
    18c2:	1f 90       	pop	r1
    18c4:	18 95       	reti

000018c6 <__vector_21>:
    18c6:	1f 92       	push	r1
    18c8:	0f 92       	push	r0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	0b b6       	in	r0, 0x3b	; 59
    18d2:	0f 92       	push	r0
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	ef 93       	push	r30
    18ea:	ff 93       	push	r31
    18ec:	e0 91 86 22 	lds	r30, 0x2286	; 0x802286 <tc_tcc1_err_callback>
    18f0:	f0 91 87 22 	lds	r31, 0x2287	; 0x802287 <tc_tcc1_err_callback+0x1>
    18f4:	30 97       	sbiw	r30, 0x00	; 0
    18f6:	09 f0       	breq	.+2      	; 0x18fa <__vector_21+0x34>
    18f8:	19 95       	eicall
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0b be       	out	0x3b, r0	; 59
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <__vector_22>:
    1920:	1f 92       	push	r1
    1922:	0f 92       	push	r0
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	0f 92       	push	r0
    1928:	11 24       	eor	r1, r1
    192a:	0b b6       	in	r0, 0x3b	; 59
    192c:	0f 92       	push	r0
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	e0 91 84 22 	lds	r30, 0x2284	; 0x802284 <tc_tcc1_cca_callback>
    194a:	f0 91 85 22 	lds	r31, 0x2285	; 0x802285 <tc_tcc1_cca_callback+0x1>
    194e:	30 97       	sbiw	r30, 0x00	; 0
    1950:	09 f0       	breq	.+2      	; 0x1954 <__vector_22+0x34>
    1952:	19 95       	eicall
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	0f 90       	pop	r0
    196e:	0b be       	out	0x3b, r0	; 59
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_23>:
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	0b b6       	in	r0, 0x3b	; 59
    1986:	0f 92       	push	r0
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <tc_tcc1_ccb_callback>
    19a4:	f0 91 83 22 	lds	r31, 0x2283	; 0x802283 <tc_tcc1_ccb_callback+0x1>
    19a8:	30 97       	sbiw	r30, 0x00	; 0
    19aa:	09 f0       	breq	.+2      	; 0x19ae <__vector_23+0x34>
    19ac:	19 95       	eicall
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0b be       	out	0x3b, r0	; 59
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <__vector_77>:
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	0b b6       	in	r0, 0x3b	; 59
    19e0:	0f 92       	push	r0
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	e0 91 80 22 	lds	r30, 0x2280	; 0x802280 <tc_tcd0_ovf_callback>
    19fe:	f0 91 81 22 	lds	r31, 0x2281	; 0x802281 <tc_tcd0_ovf_callback+0x1>
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <__vector_77+0x34>
    1a06:	19 95       	eicall
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0b be       	out	0x3b, r0	; 59
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_78>:
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	0b b6       	in	r0, 0x3b	; 59
    1a3a:	0f 92       	push	r0
    1a3c:	2f 93       	push	r18
    1a3e:	3f 93       	push	r19
    1a40:	4f 93       	push	r20
    1a42:	5f 93       	push	r21
    1a44:	6f 93       	push	r22
    1a46:	7f 93       	push	r23
    1a48:	8f 93       	push	r24
    1a4a:	9f 93       	push	r25
    1a4c:	af 93       	push	r26
    1a4e:	bf 93       	push	r27
    1a50:	ef 93       	push	r30
    1a52:	ff 93       	push	r31
    1a54:	e0 91 7e 22 	lds	r30, 0x227E	; 0x80227e <tc_tcd0_err_callback>
    1a58:	f0 91 7f 22 	lds	r31, 0x227F	; 0x80227f <tc_tcd0_err_callback+0x1>
    1a5c:	30 97       	sbiw	r30, 0x00	; 0
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <__vector_78+0x34>
    1a60:	19 95       	eicall
    1a62:	ff 91       	pop	r31
    1a64:	ef 91       	pop	r30
    1a66:	bf 91       	pop	r27
    1a68:	af 91       	pop	r26
    1a6a:	9f 91       	pop	r25
    1a6c:	8f 91       	pop	r24
    1a6e:	7f 91       	pop	r23
    1a70:	6f 91       	pop	r22
    1a72:	5f 91       	pop	r21
    1a74:	4f 91       	pop	r20
    1a76:	3f 91       	pop	r19
    1a78:	2f 91       	pop	r18
    1a7a:	0f 90       	pop	r0
    1a7c:	0b be       	out	0x3b, r0	; 59
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	0f 90       	pop	r0
    1a84:	1f 90       	pop	r1
    1a86:	18 95       	reti

00001a88 <__vector_79>:
    1a88:	1f 92       	push	r1
    1a8a:	0f 92       	push	r0
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	0f 92       	push	r0
    1a90:	11 24       	eor	r1, r1
    1a92:	0b b6       	in	r0, 0x3b	; 59
    1a94:	0f 92       	push	r0
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
    1aae:	e0 91 7c 22 	lds	r30, 0x227C	; 0x80227c <tc_tcd0_cca_callback>
    1ab2:	f0 91 7d 22 	lds	r31, 0x227D	; 0x80227d <tc_tcd0_cca_callback+0x1>
    1ab6:	30 97       	sbiw	r30, 0x00	; 0
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <__vector_79+0x34>
    1aba:	19 95       	eicall
    1abc:	ff 91       	pop	r31
    1abe:	ef 91       	pop	r30
    1ac0:	bf 91       	pop	r27
    1ac2:	af 91       	pop	r26
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	7f 91       	pop	r23
    1aca:	6f 91       	pop	r22
    1acc:	5f 91       	pop	r21
    1ace:	4f 91       	pop	r20
    1ad0:	3f 91       	pop	r19
    1ad2:	2f 91       	pop	r18
    1ad4:	0f 90       	pop	r0
    1ad6:	0b be       	out	0x3b, r0	; 59
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <__vector_80>:
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	0b b6       	in	r0, 0x3b	; 59
    1aee:	0f 92       	push	r0
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	e0 91 7a 22 	lds	r30, 0x227A	; 0x80227a <tc_tcd0_ccb_callback>
    1b0c:	f0 91 7b 22 	lds	r31, 0x227B	; 0x80227b <tc_tcd0_ccb_callback+0x1>
    1b10:	30 97       	sbiw	r30, 0x00	; 0
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <__vector_80+0x34>
    1b14:	19 95       	eicall
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0b be       	out	0x3b, r0	; 59
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <__vector_81>:
    1b3c:	1f 92       	push	r1
    1b3e:	0f 92       	push	r0
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	0f 92       	push	r0
    1b44:	11 24       	eor	r1, r1
    1b46:	0b b6       	in	r0, 0x3b	; 59
    1b48:	0f 92       	push	r0
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	e0 91 78 22 	lds	r30, 0x2278	; 0x802278 <tc_tcd0_ccc_callback>
    1b66:	f0 91 79 22 	lds	r31, 0x2279	; 0x802279 <tc_tcd0_ccc_callback+0x1>
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__vector_81+0x34>
    1b6e:	19 95       	eicall
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <__vector_82>:
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	0b b6       	in	r0, 0x3b	; 59
    1ba2:	0f 92       	push	r0
    1ba4:	2f 93       	push	r18
    1ba6:	3f 93       	push	r19
    1ba8:	4f 93       	push	r20
    1baa:	5f 93       	push	r21
    1bac:	6f 93       	push	r22
    1bae:	7f 93       	push	r23
    1bb0:	8f 93       	push	r24
    1bb2:	9f 93       	push	r25
    1bb4:	af 93       	push	r26
    1bb6:	bf 93       	push	r27
    1bb8:	ef 93       	push	r30
    1bba:	ff 93       	push	r31
    1bbc:	e0 91 76 22 	lds	r30, 0x2276	; 0x802276 <tc_tcd0_ccd_callback>
    1bc0:	f0 91 77 22 	lds	r31, 0x2277	; 0x802277 <tc_tcd0_ccd_callback+0x1>
    1bc4:	30 97       	sbiw	r30, 0x00	; 0
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__vector_82+0x34>
    1bc8:	19 95       	eicall
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	7f 91       	pop	r23
    1bd8:	6f 91       	pop	r22
    1bda:	5f 91       	pop	r21
    1bdc:	4f 91       	pop	r20
    1bde:	3f 91       	pop	r19
    1be0:	2f 91       	pop	r18
    1be2:	0f 90       	pop	r0
    1be4:	0b be       	out	0x3b, r0	; 59
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	0f 90       	pop	r0
    1bec:	1f 90       	pop	r1
    1bee:	18 95       	reti

00001bf0 <__vector_83>:
    1bf0:	1f 92       	push	r1
    1bf2:	0f 92       	push	r0
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	0f 92       	push	r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	0b b6       	in	r0, 0x3b	; 59
    1bfc:	0f 92       	push	r0
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
    1c16:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <tc_tcd1_ovf_callback>
    1c1a:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <tc_tcd1_ovf_callback+0x1>
    1c1e:	30 97       	sbiw	r30, 0x00	; 0
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <__vector_83+0x34>
    1c22:	19 95       	eicall
    1c24:	ff 91       	pop	r31
    1c26:	ef 91       	pop	r30
    1c28:	bf 91       	pop	r27
    1c2a:	af 91       	pop	r26
    1c2c:	9f 91       	pop	r25
    1c2e:	8f 91       	pop	r24
    1c30:	7f 91       	pop	r23
    1c32:	6f 91       	pop	r22
    1c34:	5f 91       	pop	r21
    1c36:	4f 91       	pop	r20
    1c38:	3f 91       	pop	r19
    1c3a:	2f 91       	pop	r18
    1c3c:	0f 90       	pop	r0
    1c3e:	0b be       	out	0x3b, r0	; 59
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <__vector_84>:
    1c4a:	1f 92       	push	r1
    1c4c:	0f 92       	push	r0
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	0f 92       	push	r0
    1c52:	11 24       	eor	r1, r1
    1c54:	0b b6       	in	r0, 0x3b	; 59
    1c56:	0f 92       	push	r0
    1c58:	2f 93       	push	r18
    1c5a:	3f 93       	push	r19
    1c5c:	4f 93       	push	r20
    1c5e:	5f 93       	push	r21
    1c60:	6f 93       	push	r22
    1c62:	7f 93       	push	r23
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25
    1c68:	af 93       	push	r26
    1c6a:	bf 93       	push	r27
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
    1c70:	e0 91 72 22 	lds	r30, 0x2272	; 0x802272 <tc_tcd1_err_callback>
    1c74:	f0 91 73 22 	lds	r31, 0x2273	; 0x802273 <tc_tcd1_err_callback+0x1>
    1c78:	30 97       	sbiw	r30, 0x00	; 0
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <__vector_84+0x34>
    1c7c:	19 95       	eicall
    1c7e:	ff 91       	pop	r31
    1c80:	ef 91       	pop	r30
    1c82:	bf 91       	pop	r27
    1c84:	af 91       	pop	r26
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0b be       	out	0x3b, r0	; 59
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <__vector_85>:
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	0b b6       	in	r0, 0x3b	; 59
    1cb0:	0f 92       	push	r0
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
    1cca:	e0 91 70 22 	lds	r30, 0x2270	; 0x802270 <tc_tcd1_cca_callback>
    1cce:	f0 91 71 22 	lds	r31, 0x2271	; 0x802271 <tc_tcd1_cca_callback+0x1>
    1cd2:	30 97       	sbiw	r30, 0x00	; 0
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <__vector_85+0x34>
    1cd6:	19 95       	eicall
    1cd8:	ff 91       	pop	r31
    1cda:	ef 91       	pop	r30
    1cdc:	bf 91       	pop	r27
    1cde:	af 91       	pop	r26
    1ce0:	9f 91       	pop	r25
    1ce2:	8f 91       	pop	r24
    1ce4:	7f 91       	pop	r23
    1ce6:	6f 91       	pop	r22
    1ce8:	5f 91       	pop	r21
    1cea:	4f 91       	pop	r20
    1cec:	3f 91       	pop	r19
    1cee:	2f 91       	pop	r18
    1cf0:	0f 90       	pop	r0
    1cf2:	0b be       	out	0x3b, r0	; 59
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <__vector_86>:
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	0b b6       	in	r0, 0x3b	; 59
    1d0a:	0f 92       	push	r0
    1d0c:	2f 93       	push	r18
    1d0e:	3f 93       	push	r19
    1d10:	4f 93       	push	r20
    1d12:	5f 93       	push	r21
    1d14:	6f 93       	push	r22
    1d16:	7f 93       	push	r23
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	af 93       	push	r26
    1d1e:	bf 93       	push	r27
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31
    1d24:	e0 91 6e 22 	lds	r30, 0x226E	; 0x80226e <tc_tcd1_ccb_callback>
    1d28:	f0 91 6f 22 	lds	r31, 0x226F	; 0x80226f <tc_tcd1_ccb_callback+0x1>
    1d2c:	30 97       	sbiw	r30, 0x00	; 0
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <__vector_86+0x34>
    1d30:	19 95       	eicall
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0b be       	out	0x3b, r0	; 59
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <__vector_47>:
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	0b b6       	in	r0, 0x3b	; 59
    1d64:	0f 92       	push	r0
    1d66:	2f 93       	push	r18
    1d68:	3f 93       	push	r19
    1d6a:	4f 93       	push	r20
    1d6c:	5f 93       	push	r21
    1d6e:	6f 93       	push	r22
    1d70:	7f 93       	push	r23
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	af 93       	push	r26
    1d78:	bf 93       	push	r27
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	e0 91 6c 22 	lds	r30, 0x226C	; 0x80226c <tc_tce0_ovf_callback>
    1d82:	f0 91 6d 22 	lds	r31, 0x226D	; 0x80226d <tc_tce0_ovf_callback+0x1>
    1d86:	30 97       	sbiw	r30, 0x00	; 0
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <__vector_47+0x34>
    1d8a:	19 95       	eicall
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	0f 90       	pop	r0
    1da6:	0b be       	out	0x3b, r0	; 59
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <__vector_48>:
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	0b b6       	in	r0, 0x3b	; 59
    1dbe:	0f 92       	push	r0
    1dc0:	2f 93       	push	r18
    1dc2:	3f 93       	push	r19
    1dc4:	4f 93       	push	r20
    1dc6:	5f 93       	push	r21
    1dc8:	6f 93       	push	r22
    1dca:	7f 93       	push	r23
    1dcc:	8f 93       	push	r24
    1dce:	9f 93       	push	r25
    1dd0:	af 93       	push	r26
    1dd2:	bf 93       	push	r27
    1dd4:	ef 93       	push	r30
    1dd6:	ff 93       	push	r31
    1dd8:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <tc_tce0_err_callback>
    1ddc:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <tc_tce0_err_callback+0x1>
    1de0:	30 97       	sbiw	r30, 0x00	; 0
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <__vector_48+0x34>
    1de4:	19 95       	eicall
    1de6:	ff 91       	pop	r31
    1de8:	ef 91       	pop	r30
    1dea:	bf 91       	pop	r27
    1dec:	af 91       	pop	r26
    1dee:	9f 91       	pop	r25
    1df0:	8f 91       	pop	r24
    1df2:	7f 91       	pop	r23
    1df4:	6f 91       	pop	r22
    1df6:	5f 91       	pop	r21
    1df8:	4f 91       	pop	r20
    1dfa:	3f 91       	pop	r19
    1dfc:	2f 91       	pop	r18
    1dfe:	0f 90       	pop	r0
    1e00:	0b be       	out	0x3b, r0	; 59
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <__vector_49>:
    1e0c:	1f 92       	push	r1
    1e0e:	0f 92       	push	r0
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	0f 92       	push	r0
    1e14:	11 24       	eor	r1, r1
    1e16:	0b b6       	in	r0, 0x3b	; 59
    1e18:	0f 92       	push	r0
    1e1a:	2f 93       	push	r18
    1e1c:	3f 93       	push	r19
    1e1e:	4f 93       	push	r20
    1e20:	5f 93       	push	r21
    1e22:	6f 93       	push	r22
    1e24:	7f 93       	push	r23
    1e26:	8f 93       	push	r24
    1e28:	9f 93       	push	r25
    1e2a:	af 93       	push	r26
    1e2c:	bf 93       	push	r27
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
    1e32:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <tc_tce0_cca_callback>
    1e36:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <tc_tce0_cca_callback+0x1>
    1e3a:	30 97       	sbiw	r30, 0x00	; 0
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <__vector_49+0x34>
    1e3e:	19 95       	eicall
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0b be       	out	0x3b, r0	; 59
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <__vector_50>:
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	0b b6       	in	r0, 0x3b	; 59
    1e72:	0f 92       	push	r0
    1e74:	2f 93       	push	r18
    1e76:	3f 93       	push	r19
    1e78:	4f 93       	push	r20
    1e7a:	5f 93       	push	r21
    1e7c:	6f 93       	push	r22
    1e7e:	7f 93       	push	r23
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	af 93       	push	r26
    1e86:	bf 93       	push	r27
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
    1e8c:	e0 91 66 22 	lds	r30, 0x2266	; 0x802266 <tc_tce0_ccb_callback>
    1e90:	f0 91 67 22 	lds	r31, 0x2267	; 0x802267 <tc_tce0_ccb_callback+0x1>
    1e94:	30 97       	sbiw	r30, 0x00	; 0
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <__vector_50+0x34>
    1e98:	19 95       	eicall
    1e9a:	ff 91       	pop	r31
    1e9c:	ef 91       	pop	r30
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	9f 91       	pop	r25
    1ea4:	8f 91       	pop	r24
    1ea6:	7f 91       	pop	r23
    1ea8:	6f 91       	pop	r22
    1eaa:	5f 91       	pop	r21
    1eac:	4f 91       	pop	r20
    1eae:	3f 91       	pop	r19
    1eb0:	2f 91       	pop	r18
    1eb2:	0f 90       	pop	r0
    1eb4:	0b be       	out	0x3b, r0	; 59
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_51>:
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	0b b6       	in	r0, 0x3b	; 59
    1ecc:	0f 92       	push	r0
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	ef 93       	push	r30
    1ee4:	ff 93       	push	r31
    1ee6:	e0 91 64 22 	lds	r30, 0x2264	; 0x802264 <tc_tce0_ccc_callback>
    1eea:	f0 91 65 22 	lds	r31, 0x2265	; 0x802265 <tc_tce0_ccc_callback+0x1>
    1eee:	30 97       	sbiw	r30, 0x00	; 0
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <__vector_51+0x34>
    1ef2:	19 95       	eicall
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	bf 91       	pop	r27
    1efa:	af 91       	pop	r26
    1efc:	9f 91       	pop	r25
    1efe:	8f 91       	pop	r24
    1f00:	7f 91       	pop	r23
    1f02:	6f 91       	pop	r22
    1f04:	5f 91       	pop	r21
    1f06:	4f 91       	pop	r20
    1f08:	3f 91       	pop	r19
    1f0a:	2f 91       	pop	r18
    1f0c:	0f 90       	pop	r0
    1f0e:	0b be       	out	0x3b, r0	; 59
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <__vector_52>:
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	11 24       	eor	r1, r1
    1f24:	0b b6       	in	r0, 0x3b	; 59
    1f26:	0f 92       	push	r0
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	4f 93       	push	r20
    1f2e:	5f 93       	push	r21
    1f30:	6f 93       	push	r22
    1f32:	7f 93       	push	r23
    1f34:	8f 93       	push	r24
    1f36:	9f 93       	push	r25
    1f38:	af 93       	push	r26
    1f3a:	bf 93       	push	r27
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
    1f40:	e0 91 62 22 	lds	r30, 0x2262	; 0x802262 <tc_tce0_ccd_callback>
    1f44:	f0 91 63 22 	lds	r31, 0x2263	; 0x802263 <tc_tce0_ccd_callback+0x1>
    1f48:	30 97       	sbiw	r30, 0x00	; 0
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <__vector_52+0x34>
    1f4c:	19 95       	eicall
    1f4e:	ff 91       	pop	r31
    1f50:	ef 91       	pop	r30
    1f52:	bf 91       	pop	r27
    1f54:	af 91       	pop	r26
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	7f 91       	pop	r23
    1f5c:	6f 91       	pop	r22
    1f5e:	5f 91       	pop	r21
    1f60:	4f 91       	pop	r20
    1f62:	3f 91       	pop	r19
    1f64:	2f 91       	pop	r18
    1f66:	0f 90       	pop	r0
    1f68:	0b be       	out	0x3b, r0	; 59
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__vector_53>:
    1f74:	1f 92       	push	r1
    1f76:	0f 92       	push	r0
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	0f 92       	push	r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	0b b6       	in	r0, 0x3b	; 59
    1f80:	0f 92       	push	r0
    1f82:	2f 93       	push	r18
    1f84:	3f 93       	push	r19
    1f86:	4f 93       	push	r20
    1f88:	5f 93       	push	r21
    1f8a:	6f 93       	push	r22
    1f8c:	7f 93       	push	r23
    1f8e:	8f 93       	push	r24
    1f90:	9f 93       	push	r25
    1f92:	af 93       	push	r26
    1f94:	bf 93       	push	r27
    1f96:	ef 93       	push	r30
    1f98:	ff 93       	push	r31
    1f9a:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <tc_tce1_ovf_callback>
    1f9e:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <tc_tce1_ovf_callback+0x1>
    1fa2:	30 97       	sbiw	r30, 0x00	; 0
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <__vector_53+0x34>
    1fa6:	19 95       	eicall
    1fa8:	ff 91       	pop	r31
    1faa:	ef 91       	pop	r30
    1fac:	bf 91       	pop	r27
    1fae:	af 91       	pop	r26
    1fb0:	9f 91       	pop	r25
    1fb2:	8f 91       	pop	r24
    1fb4:	7f 91       	pop	r23
    1fb6:	6f 91       	pop	r22
    1fb8:	5f 91       	pop	r21
    1fba:	4f 91       	pop	r20
    1fbc:	3f 91       	pop	r19
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0b be       	out	0x3b, r0	; 59
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <__vector_54>:
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	0b b6       	in	r0, 0x3b	; 59
    1fda:	0f 92       	push	r0
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	4f 93       	push	r20
    1fe2:	5f 93       	push	r21
    1fe4:	6f 93       	push	r22
    1fe6:	7f 93       	push	r23
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	af 93       	push	r26
    1fee:	bf 93       	push	r27
    1ff0:	ef 93       	push	r30
    1ff2:	ff 93       	push	r31
    1ff4:	e0 91 5e 22 	lds	r30, 0x225E	; 0x80225e <tc_tce1_err_callback>
    1ff8:	f0 91 5f 22 	lds	r31, 0x225F	; 0x80225f <tc_tce1_err_callback+0x1>
    1ffc:	30 97       	sbiw	r30, 0x00	; 0
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <__vector_54+0x34>
    2000:	19 95       	eicall
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0b be       	out	0x3b, r0	; 59
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <__vector_55>:
    2028:	1f 92       	push	r1
    202a:	0f 92       	push	r0
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	0f 92       	push	r0
    2030:	11 24       	eor	r1, r1
    2032:	0b b6       	in	r0, 0x3b	; 59
    2034:	0f 92       	push	r0
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	e0 91 5c 22 	lds	r30, 0x225C	; 0x80225c <tc_tce1_cca_callback>
    2052:	f0 91 5d 22 	lds	r31, 0x225D	; 0x80225d <tc_tce1_cca_callback+0x1>
    2056:	30 97       	sbiw	r30, 0x00	; 0
    2058:	09 f0       	breq	.+2      	; 0x205c <__vector_55+0x34>
    205a:	19 95       	eicall
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0b be       	out	0x3b, r0	; 59
    2078:	0f 90       	pop	r0
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	0f 90       	pop	r0
    207e:	1f 90       	pop	r1
    2080:	18 95       	reti

00002082 <__vector_56>:
    2082:	1f 92       	push	r1
    2084:	0f 92       	push	r0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	0f 92       	push	r0
    208a:	11 24       	eor	r1, r1
    208c:	0b b6       	in	r0, 0x3b	; 59
    208e:	0f 92       	push	r0
    2090:	2f 93       	push	r18
    2092:	3f 93       	push	r19
    2094:	4f 93       	push	r20
    2096:	5f 93       	push	r21
    2098:	6f 93       	push	r22
    209a:	7f 93       	push	r23
    209c:	8f 93       	push	r24
    209e:	9f 93       	push	r25
    20a0:	af 93       	push	r26
    20a2:	bf 93       	push	r27
    20a4:	ef 93       	push	r30
    20a6:	ff 93       	push	r31
    20a8:	e0 91 5a 22 	lds	r30, 0x225A	; 0x80225a <tc_tce1_ccb_callback>
    20ac:	f0 91 5b 22 	lds	r31, 0x225B	; 0x80225b <tc_tce1_ccb_callback+0x1>
    20b0:	30 97       	sbiw	r30, 0x00	; 0
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <__vector_56+0x34>
    20b4:	19 95       	eicall
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0b be       	out	0x3b, r0	; 59
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <__vector_108>:
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	0b b6       	in	r0, 0x3b	; 59
    20e8:	0f 92       	push	r0
    20ea:	2f 93       	push	r18
    20ec:	3f 93       	push	r19
    20ee:	4f 93       	push	r20
    20f0:	5f 93       	push	r21
    20f2:	6f 93       	push	r22
    20f4:	7f 93       	push	r23
    20f6:	8f 93       	push	r24
    20f8:	9f 93       	push	r25
    20fa:	af 93       	push	r26
    20fc:	bf 93       	push	r27
    20fe:	ef 93       	push	r30
    2100:	ff 93       	push	r31
    2102:	e0 91 58 22 	lds	r30, 0x2258	; 0x802258 <tc_tcf0_ovf_callback>
    2106:	f0 91 59 22 	lds	r31, 0x2259	; 0x802259 <tc_tcf0_ovf_callback+0x1>
    210a:	30 97       	sbiw	r30, 0x00	; 0
    210c:	09 f0       	breq	.+2      	; 0x2110 <__vector_108+0x34>
    210e:	19 95       	eicall
    2110:	ff 91       	pop	r31
    2112:	ef 91       	pop	r30
    2114:	bf 91       	pop	r27
    2116:	af 91       	pop	r26
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	7f 91       	pop	r23
    211e:	6f 91       	pop	r22
    2120:	5f 91       	pop	r21
    2122:	4f 91       	pop	r20
    2124:	3f 91       	pop	r19
    2126:	2f 91       	pop	r18
    2128:	0f 90       	pop	r0
    212a:	0b be       	out	0x3b, r0	; 59
    212c:	0f 90       	pop	r0
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	0f 90       	pop	r0
    2132:	1f 90       	pop	r1
    2134:	18 95       	reti

00002136 <__vector_109>:
    2136:	1f 92       	push	r1
    2138:	0f 92       	push	r0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	0f 92       	push	r0
    213e:	11 24       	eor	r1, r1
    2140:	0b b6       	in	r0, 0x3b	; 59
    2142:	0f 92       	push	r0
    2144:	2f 93       	push	r18
    2146:	3f 93       	push	r19
    2148:	4f 93       	push	r20
    214a:	5f 93       	push	r21
    214c:	6f 93       	push	r22
    214e:	7f 93       	push	r23
    2150:	8f 93       	push	r24
    2152:	9f 93       	push	r25
    2154:	af 93       	push	r26
    2156:	bf 93       	push	r27
    2158:	ef 93       	push	r30
    215a:	ff 93       	push	r31
    215c:	e0 91 56 22 	lds	r30, 0x2256	; 0x802256 <tc_tcf0_err_callback>
    2160:	f0 91 57 22 	lds	r31, 0x2257	; 0x802257 <tc_tcf0_err_callback+0x1>
    2164:	30 97       	sbiw	r30, 0x00	; 0
    2166:	09 f0       	breq	.+2      	; 0x216a <__vector_109+0x34>
    2168:	19 95       	eicall
    216a:	ff 91       	pop	r31
    216c:	ef 91       	pop	r30
    216e:	bf 91       	pop	r27
    2170:	af 91       	pop	r26
    2172:	9f 91       	pop	r25
    2174:	8f 91       	pop	r24
    2176:	7f 91       	pop	r23
    2178:	6f 91       	pop	r22
    217a:	5f 91       	pop	r21
    217c:	4f 91       	pop	r20
    217e:	3f 91       	pop	r19
    2180:	2f 91       	pop	r18
    2182:	0f 90       	pop	r0
    2184:	0b be       	out	0x3b, r0	; 59
    2186:	0f 90       	pop	r0
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	0f 90       	pop	r0
    218c:	1f 90       	pop	r1
    218e:	18 95       	reti

00002190 <__vector_110>:
    2190:	1f 92       	push	r1
    2192:	0f 92       	push	r0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	0f 92       	push	r0
    2198:	11 24       	eor	r1, r1
    219a:	0b b6       	in	r0, 0x3b	; 59
    219c:	0f 92       	push	r0
    219e:	2f 93       	push	r18
    21a0:	3f 93       	push	r19
    21a2:	4f 93       	push	r20
    21a4:	5f 93       	push	r21
    21a6:	6f 93       	push	r22
    21a8:	7f 93       	push	r23
    21aa:	8f 93       	push	r24
    21ac:	9f 93       	push	r25
    21ae:	af 93       	push	r26
    21b0:	bf 93       	push	r27
    21b2:	ef 93       	push	r30
    21b4:	ff 93       	push	r31
    21b6:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <tc_tcf0_cca_callback>
    21ba:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <tc_tcf0_cca_callback+0x1>
    21be:	30 97       	sbiw	r30, 0x00	; 0
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <__vector_110+0x34>
    21c2:	19 95       	eicall
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0b be       	out	0x3b, r0	; 59
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti

000021ea <__vector_111>:
    21ea:	1f 92       	push	r1
    21ec:	0f 92       	push	r0
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	0f 92       	push	r0
    21f2:	11 24       	eor	r1, r1
    21f4:	0b b6       	in	r0, 0x3b	; 59
    21f6:	0f 92       	push	r0
    21f8:	2f 93       	push	r18
    21fa:	3f 93       	push	r19
    21fc:	4f 93       	push	r20
    21fe:	5f 93       	push	r21
    2200:	6f 93       	push	r22
    2202:	7f 93       	push	r23
    2204:	8f 93       	push	r24
    2206:	9f 93       	push	r25
    2208:	af 93       	push	r26
    220a:	bf 93       	push	r27
    220c:	ef 93       	push	r30
    220e:	ff 93       	push	r31
    2210:	e0 91 52 22 	lds	r30, 0x2252	; 0x802252 <tc_tcf0_ccb_callback>
    2214:	f0 91 53 22 	lds	r31, 0x2253	; 0x802253 <tc_tcf0_ccb_callback+0x1>
    2218:	30 97       	sbiw	r30, 0x00	; 0
    221a:	09 f0       	breq	.+2      	; 0x221e <__vector_111+0x34>
    221c:	19 95       	eicall
    221e:	ff 91       	pop	r31
    2220:	ef 91       	pop	r30
    2222:	bf 91       	pop	r27
    2224:	af 91       	pop	r26
    2226:	9f 91       	pop	r25
    2228:	8f 91       	pop	r24
    222a:	7f 91       	pop	r23
    222c:	6f 91       	pop	r22
    222e:	5f 91       	pop	r21
    2230:	4f 91       	pop	r20
    2232:	3f 91       	pop	r19
    2234:	2f 91       	pop	r18
    2236:	0f 90       	pop	r0
    2238:	0b be       	out	0x3b, r0	; 59
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	0f 90       	pop	r0
    2240:	1f 90       	pop	r1
    2242:	18 95       	reti

00002244 <__vector_112>:
    2244:	1f 92       	push	r1
    2246:	0f 92       	push	r0
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	0f 92       	push	r0
    224c:	11 24       	eor	r1, r1
    224e:	0b b6       	in	r0, 0x3b	; 59
    2250:	0f 92       	push	r0
    2252:	2f 93       	push	r18
    2254:	3f 93       	push	r19
    2256:	4f 93       	push	r20
    2258:	5f 93       	push	r21
    225a:	6f 93       	push	r22
    225c:	7f 93       	push	r23
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25
    2262:	af 93       	push	r26
    2264:	bf 93       	push	r27
    2266:	ef 93       	push	r30
    2268:	ff 93       	push	r31
    226a:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <tc_tcf0_ccc_callback>
    226e:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <tc_tcf0_ccc_callback+0x1>
    2272:	30 97       	sbiw	r30, 0x00	; 0
    2274:	09 f0       	breq	.+2      	; 0x2278 <__vector_112+0x34>
    2276:	19 95       	eicall
    2278:	ff 91       	pop	r31
    227a:	ef 91       	pop	r30
    227c:	bf 91       	pop	r27
    227e:	af 91       	pop	r26
    2280:	9f 91       	pop	r25
    2282:	8f 91       	pop	r24
    2284:	7f 91       	pop	r23
    2286:	6f 91       	pop	r22
    2288:	5f 91       	pop	r21
    228a:	4f 91       	pop	r20
    228c:	3f 91       	pop	r19
    228e:	2f 91       	pop	r18
    2290:	0f 90       	pop	r0
    2292:	0b be       	out	0x3b, r0	; 59
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	0f 90       	pop	r0
    229a:	1f 90       	pop	r1
    229c:	18 95       	reti

0000229e <__vector_113>:
    229e:	1f 92       	push	r1
    22a0:	0f 92       	push	r0
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	0f 92       	push	r0
    22a6:	11 24       	eor	r1, r1
    22a8:	0b b6       	in	r0, 0x3b	; 59
    22aa:	0f 92       	push	r0
    22ac:	2f 93       	push	r18
    22ae:	3f 93       	push	r19
    22b0:	4f 93       	push	r20
    22b2:	5f 93       	push	r21
    22b4:	6f 93       	push	r22
    22b6:	7f 93       	push	r23
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	af 93       	push	r26
    22be:	bf 93       	push	r27
    22c0:	ef 93       	push	r30
    22c2:	ff 93       	push	r31
    22c4:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <tc_tcf0_ccd_callback>
    22c8:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <tc_tcf0_ccd_callback+0x1>
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <__vector_113+0x34>
    22d0:	19 95       	eicall
    22d2:	ff 91       	pop	r31
    22d4:	ef 91       	pop	r30
    22d6:	bf 91       	pop	r27
    22d8:	af 91       	pop	r26
    22da:	9f 91       	pop	r25
    22dc:	8f 91       	pop	r24
    22de:	7f 91       	pop	r23
    22e0:	6f 91       	pop	r22
    22e2:	5f 91       	pop	r21
    22e4:	4f 91       	pop	r20
    22e6:	3f 91       	pop	r19
    22e8:	2f 91       	pop	r18
    22ea:	0f 90       	pop	r0
    22ec:	0b be       	out	0x3b, r0	; 59
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <tc_enable>:
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	1f 92       	push	r1
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	2f b7       	in	r18, 0x3f	; 63
    2308:	2a 83       	std	Y+2, r18	; 0x02
    230a:	f8 94       	cli
    230c:	1a 81       	ldd	r17, Y+2	; 0x02
    230e:	28 2f       	mov	r18, r24
    2310:	39 2f       	mov	r19, r25
    2312:	21 15       	cp	r18, r1
    2314:	88 e0       	ldi	r24, 0x08	; 8
    2316:	38 07       	cpc	r19, r24
    2318:	49 f4       	brne	.+18     	; 0x232c <tc_enable+0x34>
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	83 e0       	ldi	r24, 0x03	; 3
    231e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2322:	64 e0       	ldi	r22, 0x04	; 4
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    232a:	4f c0       	rjmp	.+158    	; 0x23ca <tc_enable+0xd2>
    232c:	20 34       	cpi	r18, 0x40	; 64
    232e:	88 e0       	ldi	r24, 0x08	; 8
    2330:	38 07       	cpc	r19, r24
    2332:	49 f4       	brne	.+18     	; 0x2346 <tc_enable+0x4e>
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    233c:	64 e0       	ldi	r22, 0x04	; 4
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2344:	42 c0       	rjmp	.+132    	; 0x23ca <tc_enable+0xd2>
    2346:	21 15       	cp	r18, r1
    2348:	89 e0       	ldi	r24, 0x09	; 9
    234a:	38 07       	cpc	r19, r24
    234c:	49 f4       	brne	.+18     	; 0x2360 <tc_enable+0x68>
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2356:	64 e0       	ldi	r22, 0x04	; 4
    2358:	84 e0       	ldi	r24, 0x04	; 4
    235a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    235e:	35 c0       	rjmp	.+106    	; 0x23ca <tc_enable+0xd2>
    2360:	20 34       	cpi	r18, 0x40	; 64
    2362:	89 e0       	ldi	r24, 0x09	; 9
    2364:	38 07       	cpc	r19, r24
    2366:	49 f4       	brne	.+18     	; 0x237a <tc_enable+0x82>
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	84 e0       	ldi	r24, 0x04	; 4
    236c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2370:	64 e0       	ldi	r22, 0x04	; 4
    2372:	84 e0       	ldi	r24, 0x04	; 4
    2374:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2378:	28 c0       	rjmp	.+80     	; 0x23ca <tc_enable+0xd2>
    237a:	21 15       	cp	r18, r1
    237c:	8a e0       	ldi	r24, 0x0A	; 10
    237e:	38 07       	cpc	r19, r24
    2380:	49 f4       	brne	.+18     	; 0x2394 <tc_enable+0x9c>
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	85 e0       	ldi	r24, 0x05	; 5
    2386:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	85 e0       	ldi	r24, 0x05	; 5
    238e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2392:	1b c0       	rjmp	.+54     	; 0x23ca <tc_enable+0xd2>
    2394:	20 34       	cpi	r18, 0x40	; 64
    2396:	8a e0       	ldi	r24, 0x0A	; 10
    2398:	38 07       	cpc	r19, r24
    239a:	49 f4       	brne	.+18     	; 0x23ae <tc_enable+0xb6>
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	85 e0       	ldi	r24, 0x05	; 5
    23a0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23a4:	64 e0       	ldi	r22, 0x04	; 4
    23a6:	85 e0       	ldi	r24, 0x05	; 5
    23a8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <tc_enable+0xd2>
    23ae:	21 15       	cp	r18, r1
    23b0:	3b 40       	sbci	r19, 0x0B	; 11
    23b2:	49 f4       	brne	.+18     	; 0x23c6 <tc_enable+0xce>
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	86 e0       	ldi	r24, 0x06	; 6
    23b8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23bc:	64 e0       	ldi	r22, 0x04	; 4
    23be:	86 e0       	ldi	r24, 0x06	; 6
    23c0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <tc_enable+0xd2>
    23c6:	1f bf       	out	0x3f, r17	; 63
    23c8:	10 c0       	rjmp	.+32     	; 0x23ea <tc_enable+0xf2>
    23ca:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <sleepmgr_locks+0x1>
    23ce:	8f 3f       	cpi	r24, 0xFF	; 255
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <tc_enable+0xdc>
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <tc_enable+0xda>
    23d4:	8f b7       	in	r24, 0x3f	; 63
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	f8 94       	cli
    23da:	99 81       	ldd	r25, Y+1	; 0x01
    23dc:	e8 e1       	ldi	r30, 0x18	; 24
    23de:	f3 e2       	ldi	r31, 0x23	; 35
    23e0:	81 81       	ldd	r24, Z+1	; 0x01
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	81 83       	std	Z+1, r24	; 0x01
    23e6:	9f bf       	out	0x3f, r25	; 63
    23e8:	1f bf       	out	0x3f, r17	; 63
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	08 95       	ret

000023f6 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    23f6:	81 15       	cp	r24, r1
    23f8:	28 e0       	ldi	r18, 0x08	; 8
    23fa:	92 07       	cpc	r25, r18
    23fc:	29 f4       	brne	.+10     	; 0x2408 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    23fe:	60 93 94 22 	sts	0x2294, r22	; 0x802294 <tc_tcc0_ovf_callback>
    2402:	70 93 95 22 	sts	0x2295, r23	; 0x802295 <tc_tcc0_ovf_callback+0x1>
    2406:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2408:	80 34       	cpi	r24, 0x40	; 64
    240a:	28 e0       	ldi	r18, 0x08	; 8
    240c:	92 07       	cpc	r25, r18
    240e:	29 f4       	brne	.+10     	; 0x241a <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    2410:	60 93 88 22 	sts	0x2288, r22	; 0x802288 <tc_tcc1_ovf_callback>
    2414:	70 93 89 22 	sts	0x2289, r23	; 0x802289 <tc_tcc1_ovf_callback+0x1>
    2418:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    241a:	81 15       	cp	r24, r1
    241c:	29 e0       	ldi	r18, 0x09	; 9
    241e:	92 07       	cpc	r25, r18
    2420:	29 f4       	brne	.+10     	; 0x242c <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    2422:	60 93 80 22 	sts	0x2280, r22	; 0x802280 <tc_tcd0_ovf_callback>
    2426:	70 93 81 22 	sts	0x2281, r23	; 0x802281 <tc_tcd0_ovf_callback+0x1>
    242a:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    242c:	80 34       	cpi	r24, 0x40	; 64
    242e:	29 e0       	ldi	r18, 0x09	; 9
    2430:	92 07       	cpc	r25, r18
    2432:	29 f4       	brne	.+10     	; 0x243e <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    2434:	60 93 74 22 	sts	0x2274, r22	; 0x802274 <tc_tcd1_ovf_callback>
    2438:	70 93 75 22 	sts	0x2275, r23	; 0x802275 <tc_tcd1_ovf_callback+0x1>
    243c:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    243e:	81 15       	cp	r24, r1
    2440:	2a e0       	ldi	r18, 0x0A	; 10
    2442:	92 07       	cpc	r25, r18
    2444:	29 f4       	brne	.+10     	; 0x2450 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2446:	60 93 6c 22 	sts	0x226C, r22	; 0x80226c <tc_tce0_ovf_callback>
    244a:	70 93 6d 22 	sts	0x226D, r23	; 0x80226d <tc_tce0_ovf_callback+0x1>
    244e:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2450:	80 34       	cpi	r24, 0x40	; 64
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	92 07       	cpc	r25, r18
    2456:	29 f4       	brne	.+10     	; 0x2462 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2458:	60 93 60 22 	sts	0x2260, r22	; 0x802260 <tc_tce1_ovf_callback>
    245c:	70 93 61 22 	sts	0x2261, r23	; 0x802261 <tc_tce1_ovf_callback+0x1>
    2460:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2462:	81 15       	cp	r24, r1
    2464:	9b 40       	sbci	r25, 0x0B	; 11
    2466:	21 f4       	brne	.+8      	; 0x2470 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    2468:	60 93 58 22 	sts	0x2258, r22	; 0x802258 <tc_tcf0_ovf_callback>
    246c:	70 93 59 22 	sts	0x2259, r23	; 0x802259 <tc_tcf0_ovf_callback+0x1>
    2470:	08 95       	ret

00002472 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    2484:	d9 01       	movw	r26, r18
    2486:	c8 01       	movw	r24, r16
    2488:	b6 95       	lsr	r27
    248a:	a7 95       	ror	r26
    248c:	97 95       	ror	r25
    248e:	87 95       	ror	r24
    2490:	48 17       	cp	r20, r24
    2492:	59 07       	cpc	r21, r25
    2494:	6a 07       	cpc	r22, r26
    2496:	7b 07       	cpc	r23, r27
    2498:	70 f4       	brcc	.+28     	; 0x24b6 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    249a:	6a 01       	movw	r12, r20
    249c:	7b 01       	movw	r14, r22
    249e:	cc 0c       	add	r12, r12
    24a0:	dd 1c       	adc	r13, r13
    24a2:	ee 1c       	adc	r14, r14
    24a4:	ff 1c       	adc	r15, r15
    24a6:	c9 01       	movw	r24, r18
    24a8:	b8 01       	movw	r22, r16
    24aa:	a7 01       	movw	r20, r14
    24ac:	96 01       	movw	r18, r12
    24ae:	0f d3       	rcall	.+1566   	; 0x2ace <__udivmodsi4>
    24b0:	21 50       	subi	r18, 0x01	; 1
    24b2:	31 09       	sbc	r19, r1
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    24ba:	83 2f       	mov	r24, r19
    24bc:	8f 70       	andi	r24, 0x0F	; 15
    24be:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    24c0:	2e 83       	std	Y+6, r18	; 0x06
}
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	1f 92       	push	r1
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	7c 01       	movw	r14, r24
    24ea:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <usart_init_spi+0x1e>
    24f0:	cf c1       	rjmp	.+926    	; 0x2890 <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    24f2:	80 3c       	cpi	r24, 0xC0	; 192
    24f4:	91 05       	cpc	r25, r1
    24f6:	29 f4       	brne	.+10     	; 0x2502 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    24f8:	60 e1       	ldi	r22, 0x10	; 16
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2500:	c7 c1       	rjmp	.+910    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2502:	80 e8       	ldi	r24, 0x80	; 128
    2504:	e8 16       	cp	r14, r24
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	f8 06       	cpc	r15, r24
    250a:	29 f4       	brne	.+10     	; 0x2516 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2514:	bd c1       	rjmp	.+890    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2516:	e1 14       	cp	r14, r1
    2518:	e1 e0       	ldi	r30, 0x01	; 1
    251a:	fe 06       	cpc	r15, r30
    251c:	29 f4       	brne	.+10     	; 0x2528 <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2526:	b4 c1       	rjmp	.+872    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2528:	f0 e8       	ldi	r31, 0x80	; 128
    252a:	ef 16       	cp	r14, r31
    252c:	f3 e0       	ldi	r31, 0x03	; 3
    252e:	ff 06       	cpc	r15, r31
    2530:	29 f4       	brne	.+10     	; 0x253c <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    253a:	aa c1       	rjmp	.+852    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    253c:	30 e9       	ldi	r19, 0x90	; 144
    253e:	e3 16       	cp	r14, r19
    2540:	33 e0       	ldi	r19, 0x03	; 3
    2542:	f3 06       	cpc	r15, r19
    2544:	29 f4       	brne	.+10     	; 0x2550 <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    254e:	a0 c1       	rjmp	.+832    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2550:	e1 14       	cp	r14, r1
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	f8 06       	cpc	r15, r24
    2556:	29 f4       	brne	.+10     	; 0x2562 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2560:	97 c1       	rjmp	.+814    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2562:	e0 e4       	ldi	r30, 0x40	; 64
    2564:	ee 16       	cp	r14, r30
    2566:	e2 e0       	ldi	r30, 0x02	; 2
    2568:	fe 06       	cpc	r15, r30
    256a:	29 f4       	brne	.+10     	; 0x2576 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2574:	8d c1       	rjmp	.+794    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2576:	f0 e2       	ldi	r31, 0x20	; 32
    2578:	ef 16       	cp	r14, r31
    257a:	f3 e0       	ldi	r31, 0x03	; 3
    257c:	ff 06       	cpc	r15, r31
    257e:	29 f4       	brne	.+10     	; 0x258a <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2580:	64 e0       	ldi	r22, 0x04	; 4
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2588:	83 c1       	rjmp	.+774    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    258a:	e1 14       	cp	r14, r1
    258c:	38 e0       	ldi	r19, 0x08	; 8
    258e:	f3 06       	cpc	r15, r19
    2590:	29 f4       	brne	.+10     	; 0x259c <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    259a:	7a c1       	rjmp	.+756    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    259c:	e1 14       	cp	r14, r1
    259e:	89 e0       	ldi	r24, 0x09	; 9
    25a0:	f8 06       	cpc	r15, r24
    25a2:	29 f4       	brne	.+10     	; 0x25ae <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    25ac:	71 c1       	rjmp	.+738    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    25ae:	e1 14       	cp	r14, r1
    25b0:	ea e0       	ldi	r30, 0x0A	; 10
    25b2:	fe 06       	cpc	r15, r30
    25b4:	29 f4       	brne	.+10     	; 0x25c0 <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	85 e0       	ldi	r24, 0x05	; 5
    25ba:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    25be:	68 c1       	rjmp	.+720    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    25c0:	e1 14       	cp	r14, r1
    25c2:	fb e0       	ldi	r31, 0x0B	; 11
    25c4:	ff 06       	cpc	r15, r31
    25c6:	29 f4       	brne	.+10     	; 0x25d2 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	86 e0       	ldi	r24, 0x06	; 6
    25cc:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    25d0:	5f c1       	rjmp	.+702    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    25d2:	30 e4       	ldi	r19, 0x40	; 64
    25d4:	e3 16       	cp	r14, r19
    25d6:	38 e0       	ldi	r19, 0x08	; 8
    25d8:	f3 06       	cpc	r15, r19
    25da:	29 f4       	brne	.+10     	; 0x25e6 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    25e4:	55 c1       	rjmp	.+682    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    25e6:	80 e4       	ldi	r24, 0x40	; 64
    25e8:	e8 16       	cp	r14, r24
    25ea:	89 e0       	ldi	r24, 0x09	; 9
    25ec:	f8 06       	cpc	r15, r24
    25ee:	29 f4       	brne	.+10     	; 0x25fa <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	84 e0       	ldi	r24, 0x04	; 4
    25f4:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    25f8:	4b c1       	rjmp	.+662    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    25fa:	e0 e4       	ldi	r30, 0x40	; 64
    25fc:	ee 16       	cp	r14, r30
    25fe:	ea e0       	ldi	r30, 0x0A	; 10
    2600:	fe 06       	cpc	r15, r30
    2602:	29 f4       	brne	.+10     	; 0x260e <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2604:	62 e0       	ldi	r22, 0x02	; 2
    2606:	85 e0       	ldi	r24, 0x05	; 5
    2608:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    260c:	41 c1       	rjmp	.+642    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    260e:	f0 e9       	ldi	r31, 0x90	; 144
    2610:	ef 16       	cp	r14, r31
    2612:	f8 e0       	ldi	r31, 0x08	; 8
    2614:	ff 06       	cpc	r15, r31
    2616:	29 f4       	brne	.+10     	; 0x2622 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2620:	37 c1       	rjmp	.+622    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2622:	30 e9       	ldi	r19, 0x90	; 144
    2624:	e3 16       	cp	r14, r19
    2626:	39 e0       	ldi	r19, 0x09	; 9
    2628:	f3 06       	cpc	r15, r19
    262a:	29 f4       	brne	.+10     	; 0x2636 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	84 e0       	ldi	r24, 0x04	; 4
    2630:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2634:	2d c1       	rjmp	.+602    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2636:	80 e9       	ldi	r24, 0x90	; 144
    2638:	e8 16       	cp	r14, r24
    263a:	8a e0       	ldi	r24, 0x0A	; 10
    263c:	f8 06       	cpc	r15, r24
    263e:	29 f4       	brne	.+10     	; 0x264a <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2640:	64 e0       	ldi	r22, 0x04	; 4
    2642:	85 e0       	ldi	r24, 0x05	; 5
    2644:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2648:	23 c1       	rjmp	.+582    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    264a:	e0 e9       	ldi	r30, 0x90	; 144
    264c:	ee 16       	cp	r14, r30
    264e:	eb e0       	ldi	r30, 0x0B	; 11
    2650:	fe 06       	cpc	r15, r30
    2652:	29 f4       	brne	.+10     	; 0x265e <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	86 e0       	ldi	r24, 0x06	; 6
    2658:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    265c:	19 c1       	rjmp	.+562    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    265e:	f0 ec       	ldi	r31, 0xC0	; 192
    2660:	ef 16       	cp	r14, r31
    2662:	f8 e0       	ldi	r31, 0x08	; 8
    2664:	ff 06       	cpc	r15, r31
    2666:	29 f4       	brne	.+10     	; 0x2672 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2668:	68 e0       	ldi	r22, 0x08	; 8
    266a:	83 e0       	ldi	r24, 0x03	; 3
    266c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2670:	0f c1       	rjmp	.+542    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2672:	30 ec       	ldi	r19, 0xC0	; 192
    2674:	e3 16       	cp	r14, r19
    2676:	39 e0       	ldi	r19, 0x09	; 9
    2678:	f3 06       	cpc	r15, r19
    267a:	29 f4       	brne	.+10     	; 0x2686 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    267c:	68 e0       	ldi	r22, 0x08	; 8
    267e:	84 e0       	ldi	r24, 0x04	; 4
    2680:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2684:	05 c1       	rjmp	.+522    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2686:	80 ea       	ldi	r24, 0xA0	; 160
    2688:	e8 16       	cp	r14, r24
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	f8 06       	cpc	r15, r24
    268e:	69 f4       	brne	.+26     	; 0x26aa <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2690:	60 e1       	ldi	r22, 0x10	; 16
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2698:	e0 ea       	ldi	r30, 0xA0	; 160
    269a:	f8 e0       	ldi	r31, 0x08	; 8
    269c:	84 81       	ldd	r24, Z+4	; 0x04
    269e:	8f 7e       	andi	r24, 0xEF	; 239
    26a0:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    26a2:	f8 01       	movw	r30, r16
    26a4:	24 81       	ldd	r18, Z+4	; 0x04
    26a6:	22 50       	subi	r18, 0x02	; 2
    26a8:	53 c0       	rjmp	.+166    	; 0x2750 <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    26aa:	f0 ea       	ldi	r31, 0xA0	; 160
    26ac:	ef 16       	cp	r14, r31
    26ae:	f9 e0       	ldi	r31, 0x09	; 9
    26b0:	ff 06       	cpc	r15, r31
    26b2:	29 f4       	brne	.+10     	; 0x26be <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    26b4:	60 e1       	ldi	r22, 0x10	; 16
    26b6:	84 e0       	ldi	r24, 0x04	; 4
    26b8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    26bc:	e9 c0       	rjmp	.+466    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    26be:	30 ea       	ldi	r19, 0xA0	; 160
    26c0:	e3 16       	cp	r14, r19
    26c2:	3a e0       	ldi	r19, 0x0A	; 10
    26c4:	f3 06       	cpc	r15, r19
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    26c8:	60 e1       	ldi	r22, 0x10	; 16
    26ca:	85 e0       	ldi	r24, 0x05	; 5
    26cc:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    26d0:	df c0       	rjmp	.+446    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    26d2:	80 ea       	ldi	r24, 0xA0	; 160
    26d4:	e8 16       	cp	r14, r24
    26d6:	8b e0       	ldi	r24, 0x0B	; 11
    26d8:	f8 06       	cpc	r15, r24
    26da:	29 f4       	brne	.+10     	; 0x26e6 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    26dc:	60 e1       	ldi	r22, 0x10	; 16
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    26e4:	d5 c0       	rjmp	.+426    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    26e6:	e0 eb       	ldi	r30, 0xB0	; 176
    26e8:	ee 16       	cp	r14, r30
    26ea:	e8 e0       	ldi	r30, 0x08	; 8
    26ec:	fe 06       	cpc	r15, r30
    26ee:	29 f4       	brne	.+10     	; 0x26fa <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    26f0:	60 e2       	ldi	r22, 0x20	; 32
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    26f8:	cb c0       	rjmp	.+406    	; 0x2890 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    26fa:	f0 eb       	ldi	r31, 0xB0	; 176
    26fc:	ef 16       	cp	r14, r31
    26fe:	f9 e0       	ldi	r31, 0x09	; 9
    2700:	ff 06       	cpc	r15, r31
    2702:	29 f4       	brne	.+10     	; 0x270e <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2704:	60 e2       	ldi	r22, 0x20	; 32
    2706:	84 e0       	ldi	r24, 0x04	; 4
    2708:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    270c:	c1 c0       	rjmp	.+386    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    270e:	30 e8       	ldi	r19, 0x80	; 128
    2710:	e3 16       	cp	r14, r19
    2712:	34 e0       	ldi	r19, 0x04	; 4
    2714:	f3 06       	cpc	r15, r19
    2716:	29 f4       	brne	.+10     	; 0x2722 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2718:	60 e4       	ldi	r22, 0x40	; 64
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2720:	b7 c0       	rjmp	.+366    	; 0x2890 <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2722:	80 ea       	ldi	r24, 0xA0	; 160
    2724:	e8 16       	cp	r14, r24
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	f8 06       	cpc	r15, r24
    272a:	29 f4       	brne	.+10     	; 0x2736 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    272c:	60 e4       	ldi	r22, 0x40	; 64
    272e:	85 e0       	ldi	r24, 0x05	; 5
    2730:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2734:	ad c0       	rjmp	.+346    	; 0x2890 <usart_init_spi+0x3bc>
    2736:	f7 01       	movw	r30, r14
    2738:	84 81       	ldd	r24, Z+4	; 0x04
    273a:	8f 7e       	andi	r24, 0xEF	; 239
    273c:	84 83       	std	Z+4, r24	; 0x04
    273e:	fb 01       	movw	r30, r22
    2740:	24 81       	ldd	r18, Z+4	; 0x04
    2742:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2744:	c7 01       	movw	r24, r14
    2746:	f0 ea       	ldi	r31, 0xA0	; 160
    2748:	ef 16       	cp	r14, r31
    274a:	f8 e0       	ldi	r31, 0x08	; 8
    274c:	ff 06       	cpc	r15, r31
    274e:	49 f4       	brne	.+18     	; 0x2762 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    2750:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    2754:	84 fd       	sbrc	r24, 4
    2756:	a5 c0       	rjmp	.+330    	; 0x28a2 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2758:	0f 2e       	mov	r0, r31
    275a:	f1 e1       	ldi	r31, 0x11	; 17
    275c:	df 2e       	mov	r13, r31
    275e:	f0 2d       	mov	r31, r0
    2760:	a4 c0       	rjmp	.+328    	; 0x28aa <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    2762:	80 3b       	cpi	r24, 0xB0	; 176
    2764:	38 e0       	ldi	r19, 0x08	; 8
    2766:	93 07       	cpc	r25, r19
    2768:	91 f0       	breq	.+36     	; 0x278e <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    276a:	80 3a       	cpi	r24, 0xA0	; 160
    276c:	e9 e0       	ldi	r30, 0x09	; 9
    276e:	9e 07       	cpc	r25, r30
    2770:	49 f4       	brne	.+18     	; 0x2784 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    2772:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    2776:	34 fd       	sbrc	r19, 4
    2778:	9b c0       	rjmp	.+310    	; 0x28b0 <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    277a:	0f 2e       	mov	r0, r31
    277c:	f9 e1       	ldi	r31, 0x19	; 25
    277e:	df 2e       	mov	r13, r31
    2780:	f0 2d       	mov	r31, r0
    2782:	16 c0       	rjmp	.+44     	; 0x27b0 <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2784:	80 3b       	cpi	r24, 0xB0	; 176
    2786:	f9 e0       	ldi	r31, 0x09	; 9
    2788:	9f 07       	cpc	r25, r31
    278a:	f1 f0       	breq	.+60     	; 0x27c8 <usart_init_spi+0x2f4>
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    278e:	0f 2e       	mov	r0, r31
    2790:	f5 e1       	ldi	r31, 0x15	; 21
    2792:	df 2e       	mov	r13, r31
    2794:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2796:	80 3a       	cpi	r24, 0xA0	; 160
    2798:	3a e0       	ldi	r19, 0x0A	; 10
    279a:	93 07       	cpc	r25, r19
    279c:	49 f4       	brne	.+18     	; 0x27b0 <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    279e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    27a2:	84 fd       	sbrc	r24, 4
    27a4:	8a c0       	rjmp	.+276    	; 0x28ba <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f1 e2       	ldi	r31, 0x21	; 33
    27aa:	df 2e       	mov	r13, r31
    27ac:	f0 2d       	mov	r31, r0
    27ae:	15 c0       	rjmp	.+42     	; 0x27da <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    27b0:	80 3a       	cpi	r24, 0xA0	; 160
    27b2:	9b 40       	sbci	r25, 0x0B	; 11
    27b4:	91 f4       	brne	.+36     	; 0x27da <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    27b6:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    27ba:	84 fd       	sbrc	r24, 4
    27bc:	0a c0       	rjmp	.+20     	; 0x27d2 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    27be:	0f 2e       	mov	r0, r31
    27c0:	f9 e2       	ldi	r31, 0x29	; 41
    27c2:	df 2e       	mov	r13, r31
    27c4:	f0 2d       	mov	r31, r0
    27c6:	09 c0       	rjmp	.+18     	; 0x27da <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    27c8:	0f 2e       	mov	r0, r31
    27ca:	fd e1       	ldi	r31, 0x1D	; 29
    27cc:	df 2e       	mov	r13, r31
    27ce:	f0 2d       	mov	r31, r0
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    27d2:	0f 2e       	mov	r0, r31
    27d4:	fd e2       	ldi	r31, 0x2D	; 45
    27d6:	df 2e       	mov	r13, r31
    27d8:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    27da:	ed 2d       	mov	r30, r13
    27dc:	e6 95       	lsr	r30
    27de:	e6 95       	lsr	r30
    27e0:	e6 95       	lsr	r30
    27e2:	30 e2       	ldi	r19, 0x20	; 32
    27e4:	e3 9f       	mul	r30, r19
    27e6:	f0 01       	movw	r30, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	fa 5f       	subi	r31, 0xFA	; 250
    27ec:	3d 2d       	mov	r19, r13
    27ee:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	03 2e       	mov	r0, r19
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <usart_init_spi+0x328>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2800:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2802:	22 30       	cpi	r18, 0x02	; 2
    2804:	10 f0       	brcs	.+4      	; 0x280a <usart_init_spi+0x336>
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	01 c0       	rjmp	.+2      	; 0x280c <usart_init_spi+0x338>
    280a:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    280c:	df 01       	movw	r26, r30
    280e:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    2810:	a3 0f       	add	r26, r19
    2812:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2814:	9f b7       	in	r25, 0x3f	; 63
    2816:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2818:	f8 94       	cli
	return flags;
    281a:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    281c:	2c 91       	ld	r18, X
    281e:	27 70       	andi	r18, 0x07	; 7
    2820:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    2822:	9c 91       	ld	r25, X
    2824:	94 2b       	or	r25, r20
    2826:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2828:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    282a:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    282c:	f7 01       	movw	r30, r14
    282e:	85 81       	ldd	r24, Z+5	; 0x05
    2830:	80 6c       	ori	r24, 0xC0	; 192
    2832:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2834:	f8 01       	movw	r30, r16
    2836:	84 81       	ldd	r24, Z+4	; 0x04
    2838:	8d 7f       	andi	r24, 0xFD	; 253
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	29 f4       	brne	.+10     	; 0x2848 <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    283e:	f7 01       	movw	r30, r14
    2840:	85 81       	ldd	r24, Z+5	; 0x05
    2842:	82 60       	ori	r24, 0x02	; 2
    2844:	85 83       	std	Z+5, r24	; 0x05
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2848:	f7 01       	movw	r30, r14
    284a:	85 81       	ldd	r24, Z+5	; 0x05
    284c:	8d 7f       	andi	r24, 0xFD	; 253
    284e:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    2850:	f8 01       	movw	r30, r16
    2852:	85 81       	ldd	r24, Z+5	; 0x05
    2854:	88 23       	and	r24, r24
    2856:	29 f0       	breq	.+10     	; 0x2862 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    2858:	f7 01       	movw	r30, r14
    285a:	85 81       	ldd	r24, Z+5	; 0x05
    285c:	84 60       	ori	r24, 0x04	; 4
    285e:	85 83       	std	Z+5, r24	; 0x05
    2860:	04 c0       	rjmp	.+8      	; 0x286a <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    2862:	f7 01       	movw	r30, r14
    2864:	85 81       	ldd	r24, Z+5	; 0x05
    2866:	8b 7f       	andi	r24, 0xFB	; 251
    2868:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    286a:	f8 01       	movw	r30, r16
    286c:	40 81       	ld	r20, Z
    286e:	51 81       	ldd	r21, Z+1	; 0x01
    2870:	62 81       	ldd	r22, Z+2	; 0x02
    2872:	73 81       	ldd	r23, Z+3	; 0x03
    2874:	00 e8       	ldi	r16, 0x80	; 128
    2876:	14 e8       	ldi	r17, 0x84	; 132
    2878:	2e e1       	ldi	r18, 0x1E	; 30
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	c7 01       	movw	r24, r14
    287e:	f9 dd       	rcall	.-1038   	; 0x2472 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2880:	f7 01       	movw	r30, r14
    2882:	84 81       	ldd	r24, Z+4	; 0x04
    2884:	88 60       	ori	r24, 0x08	; 8
    2886:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2888:	84 81       	ldd	r24, Z+4	; 0x04
    288a:	80 61       	ori	r24, 0x10	; 16
    288c:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    288e:	1a c0       	rjmp	.+52     	; 0x28c4 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2890:	f7 01       	movw	r30, r14
    2892:	84 81       	ldd	r24, Z+4	; 0x04
    2894:	8f 7e       	andi	r24, 0xEF	; 239
    2896:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2898:	f8 01       	movw	r30, r16
    289a:	24 81       	ldd	r18, Z+4	; 0x04
    289c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    289e:	c7 01       	movw	r24, r14
    28a0:	60 cf       	rjmp	.-320    	; 0x2762 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    28a2:	0f 2e       	mov	r0, r31
    28a4:	f5 e1       	ldi	r31, 0x15	; 21
    28a6:	df 2e       	mov	r13, r31
    28a8:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    28aa:	80 ea       	ldi	r24, 0xA0	; 160
    28ac:	98 e0       	ldi	r25, 0x08	; 8
    28ae:	6a cf       	rjmp	.-300    	; 0x2784 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    28b0:	0f 2e       	mov	r0, r31
    28b2:	fd e1       	ldi	r31, 0x1D	; 29
    28b4:	df 2e       	mov	r13, r31
    28b6:	f0 2d       	mov	r31, r0
    28b8:	7b cf       	rjmp	.-266    	; 0x27b0 <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    28ba:	0f 2e       	mov	r0, r31
    28bc:	f5 e2       	ldi	r31, 0x25	; 37
    28be:	df 2e       	mov	r13, r31
    28c0:	f0 2d       	mov	r31, r0
    28c2:	8b cf       	rjmp	.-234    	; 0x27da <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    28c4:	0f 90       	pop	r0
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	ff 90       	pop	r15
    28d0:	ef 90       	pop	r14
    28d2:	df 90       	pop	r13
    28d4:	08 95       	ret

000028d6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    28d6:	04 c0       	rjmp	.+8      	; 0x28e0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    28d8:	61 50       	subi	r22, 0x01	; 1
    28da:	71 09       	sbc	r23, r1
    28dc:	81 09       	sbc	r24, r1
    28de:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    28e0:	61 15       	cp	r22, r1
    28e2:	71 05       	cpc	r23, r1
    28e4:	81 05       	cpc	r24, r1
    28e6:	91 05       	cpc	r25, r1
    28e8:	b9 f7       	brne	.-18     	; 0x28d8 <__portable_avr_delay_cycles+0x2>
    28ea:	08 95       	ret

000028ec <read_adc>:

	adc_enable(&ADCA);
}

// Baca nilai ADC
uint16_t read_adc(void) {
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	1f 92       	push	r1
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    28f6:	8f b7       	in	r24, 0x3f	; 63
    28f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    28fa:	f8 94       	cli
	return flags;
    28fc:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    28fe:	e0 e0       	ldi	r30, 0x00	; 0
    2900:	f2 e0       	ldi	r31, 0x02	; 2
    2902:	80 81       	ld	r24, Z
    2904:	84 60       	ori	r24, 0x04	; 4
    2906:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2908:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    290a:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    290c:	80 ff       	sbrs	r24, 0
    290e:	fd cf       	rjmp	.-6      	; 0x290a <read_adc+0x1e>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    2910:	e0 e0       	ldi	r30, 0x00	; 0
    2912:	f2 e0       	ldi	r31, 0x02	; 2
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	86 83       	std	Z+6, r24	; 0x06
	adc_start_conversion(&ADCA, ADC_CH0);
	adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
	return adc_get_result(&ADCA, ADC_CH0);
    2918:	84 a1       	ldd	r24, Z+36	; 0x24
    291a:	95 a1       	ldd	r25, Z+37	; 0x25
}
    291c:	0f 90       	pop	r0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret

00002924 <timer_callback>:
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc); // No prescale
}

// Timer callback untuk logic interrupt kontrol lampu
void timer_callback(void) {
	ldr_value = read_adc();
    2924:	e3 df       	rcall	.-58     	; 0x28ec <read_adc>
    2926:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <ldr_value>
    292a:	90 93 97 22 	sts	0x2297, r25	; 0x802297 <ldr_value+0x1>
	
	// Saat LDR terbuka (terang) = nilai ADC rendah = LOW
	// Saat LDR tertutup (gelap) = nilai ADC tinggi = HIGH
	if (ldr_value > LIGHT_THRESHOLD) {
    292e:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <ldr_value>
    2932:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <ldr_value+0x1>
    2936:	81 3a       	cpi	r24, 0xA1	; 161
    2938:	9f 40       	sbci	r25, 0x0F	; 15
    293a:	20 f0       	brcs	.+8      	; 0x2944 <timer_callback+0x20>
		// Kondisi terang (HIGH)
		PORTC.OUTSET = PIN0_bm; // Turn on LED
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    2942:	08 95       	ret
		} else {
		// Kondisi gelap (LOW)
		PORTC.OUTCLR = PIN0_bm; // Turn off LED
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    294a:	08 95       	ret

0000294c <configure_light_pin>:
	return adc_get_result(&ADCA, ADC_CH0);
}

// Fungsi untuk mengkonfigurasi pin lampu
void configure_light_pin(void) {
	PORTC.DIR |= PIN0_bm;     
    294c:	e0 e4       	ldi	r30, 0x40	; 64
    294e:	f6 e0       	ldi	r31, 0x06	; 6
    2950:	80 81       	ld	r24, Z
    2952:	81 60       	ori	r24, 0x01	; 1
    2954:	80 83       	st	Z, r24
	PORTC.OUTCLR = PIN0_bm;   
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	86 83       	std	Z+6, r24	; 0x06
    295a:	08 95       	ret

0000295c <setup_timer>:
}

// Setup timer interrupt
void setup_timer(void) {
	tc_enable(&TCC0);
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	98 e0       	ldi	r25, 0x08	; 8
    2960:	cb dc       	rcall	.-1642   	; 0x22f8 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, timer_callback);
    2962:	62 e9       	ldi	r22, 0x92	; 146
    2964:	74 e1       	ldi	r23, 0x14	; 20
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	98 e0       	ldi	r25, 0x08	; 8
    296a:	45 dd       	rcall	.-1398   	; 0x23f6 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    296c:	e0 e0       	ldi	r30, 0x00	; 0
    296e:	f8 e0       	ldi	r31, 0x08	; 8
    2970:	81 81       	ldd	r24, Z+1	; 0x01
    2972:	88 7f       	andi	r24, 0xF8	; 248
    2974:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2976:	80 e1       	ldi	r24, 0x10	; 16
    2978:	97 e2       	ldi	r25, 0x27	; 39
    297a:	86 a3       	std	Z+38, r24	; 0x26
    297c:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    297e:	86 81       	ldd	r24, Z+6	; 0x06
    2980:	8c 7f       	andi	r24, 0xFC	; 252
    2982:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2984:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    2986:	83 60       	ori	r24, 0x03	; 3
    2988:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    298a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    298c:	80 7f       	andi	r24, 0xF0	; 240
    298e:	81 60       	ori	r24, 0x01	; 1
    2990:	80 83       	st	Z, r24
    2992:	08 95       	ret

00002994 <main>:
		// Kondisi gelap (LOW)
		PORTC.OUTCLR = PIN0_bm; // Turn off LED
	}
}

int main(void) {
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	2b 97       	sbiw	r28, 0x0b	; 11
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	de bf       	out	0x3e, r29	; 62
	sysclk_init();
    29a2:	0e 94 38 04 	call	0x870	; 0x870 <sysclk_init>
	board_init();
    29a6:	0e 94 54 07 	call	0xea8	; 0xea8 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    29aa:	87 e0       	ldi	r24, 0x07	; 7
    29ac:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
// Konfigurasi ADC
static void configure_adc(void) {
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(&ADCA, &adc_conf);
    29b0:	be 01       	movw	r22, r28
    29b2:	6f 5f       	subi	r22, 0xFF	; 255
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	0e 94 4f 0a 	call	0x149e	; 0x149e <adc_read_configuration>
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    29be:	ae 01       	movw	r20, r28
    29c0:	48 5f       	subi	r20, 0xF8	; 248
    29c2:	5f 4f       	sbci	r21, 0xFF	; 255
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	92 e0       	ldi	r25, 0x02	; 2
    29ca:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	8f 78       	andi	r24, 0x8F	; 143
    29d4:	80 61       	ori	r24, 0x10	; 16
    29d6:	8b 83       	std	Y+3, r24	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	8d 83       	std	Y+5, r24	; 0x05
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    29dc:	89 2f       	mov	r24, r25
    29de:	81 7e       	andi	r24, 0xE1	; 225
    29e0:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    29e2:	1c 82       	std	Y+4, r1	; 0x04

	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_write_configuration(&ADCA, &adc_conf);
    29e4:	be 01       	movw	r22, r28
    29e6:	6f 5f       	subi	r22, 0xFF	; 255
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	92 e0       	ldi	r25, 0x02	; 2
    29ee:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <adc_write_configuration>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    29f6:	19 86       	std	Y+9, r1	; 0x09

	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    29f8:	ae 01       	movw	r20, r28
    29fa:	48 5f       	subi	r20, 0xF8	; 248
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	0e 94 88 0a 	call	0x1510	; 0x1510 <adcch_write_configuration>

	adc_enable(&ADCA);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	92 e0       	ldi	r25, 0x02	; 2
    2a0c:	0e 94 2d 08 	call	0x105a	; 0x105a <adc_enable>
	sysclk_init();
	board_init();
	pmic_init();
	
	configure_adc();
	configure_light_pin();
    2a10:	9d df       	rcall	.-198    	; 0x294c <configure_light_pin>
	setup_timer();
    2a12:	a4 df       	rcall	.-184    	; 0x295c <setup_timer>
    2a14:	78 94       	sei

	// Enable global interrupts
	cpu_irq_enable();
    2a16:	0e 94 1a 05 	call	0xa34	; 0xa34 <gfx_mono_st7565r_init>
	
	gfx_mono_init();
    2a1a:	80 e1       	ldi	r24, 0x10	; 16
    2a1c:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2a20:	20 e0       	ldi	r18, 0x00	; 0
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	
	gfx_mono_draw_string("LDR Lamp Control", 0, 0, &sysfont);
    2a22:	30 e2       	ldi	r19, 0x20	; 32
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	87 e0       	ldi	r24, 0x07	; 7
    2a2a:	90 e2       	ldi	r25, 0x20	; 32
    2a2c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2a30:	0f 2e       	mov	r0, r31
	
	while (1) {
		// Update nilai ADC di LCD
		snprintf(strbuf, sizeof(strbuf), "ADC: %4d", ldr_value);
    2a32:	f8 e1       	ldi	r31, 0x18	; 24
    2a34:	ef 2e       	mov	r14, r31
    2a36:	f0 e2       	ldi	r31, 0x20	; 32
    2a38:	ff 2e       	mov	r15, r31
    2a3a:	f0 2d       	mov	r31, r0
    2a3c:	68 94       	set
    2a3e:	dd 24       	eor	r13, r13
    2a40:	d7 f8       	bld	r13, 7
    2a42:	08 e9       	ldi	r16, 0x98	; 152
    2a44:	12 e2       	ldi	r17, 0x22	; 34
    2a46:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <ldr_value>
    2a4a:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <ldr_value+0x1>
    2a4e:	9f 93       	push	r25
    2a50:	8f 93       	push	r24
    2a52:	ff 92       	push	r15
    2a54:	ef 92       	push	r14
    2a56:	1f 92       	push	r1
    2a58:	df 92       	push	r13
    2a5a:	1f 93       	push	r17
    2a5c:	0f 93       	push	r16
    2a5e:	59 d0       	rcall	.+178    	; 0x2b12 <snprintf>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
		gfx_mono_draw_string(strbuf, 0, 8, &sysfont);
    2a62:	30 e2       	ldi	r19, 0x20	; 32
    2a64:	48 e0       	ldi	r20, 0x08	; 8
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	c8 01       	movw	r24, r16
    2a6a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2a6e:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <ldr_value>
		
		if (ldr_value > LIGHT_THRESHOLD) {
    2a72:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <ldr_value+0x1>
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	81 3a       	cpi	r24, 0xA1	; 161
    2a7c:	9f 40       	sbci	r25, 0x0F	; 15
    2a7e:	88 f0       	brcs	.+34     	; 0x2aa2 <main+0x10e>
    2a80:	20 e0       	ldi	r18, 0x00	; 0
			gfx_mono_draw_string("LDR: HIGH", 0, 16, &sysfont);
    2a82:	30 e2       	ldi	r19, 0x20	; 32
    2a84:	40 e1       	ldi	r20, 0x10	; 16
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	81 e2       	ldi	r24, 0x21	; 33
    2a8a:	90 e2       	ldi	r25, 0x20	; 32
    2a8c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2a90:	20 e0       	ldi	r18, 0x00	; 0
			gfx_mono_draw_string("Lamp: ON ", 0, 24, &sysfont);
    2a92:	30 e2       	ldi	r19, 0x20	; 32
    2a94:	48 e1       	ldi	r20, 0x18	; 24
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	8b e2       	ldi	r24, 0x2B	; 43
    2a9a:	90 e2       	ldi	r25, 0x20	; 32
    2a9c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2aa0:	10 c0       	rjmp	.+32     	; 0x2ac2 <main+0x12e>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
		} else {
			gfx_mono_draw_string("LDR: LOW ", 0, 16, &sysfont);
    2aa4:	30 e2       	ldi	r19, 0x20	; 32
    2aa6:	40 e1       	ldi	r20, 0x10	; 16
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	85 e3       	ldi	r24, 0x35	; 53
    2aac:	90 e2       	ldi	r25, 0x20	; 32
    2aae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
			gfx_mono_draw_string("Lamp: OFF", 0, 24, &sysfont);
    2ab4:	30 e2       	ldi	r19, 0x20	; 32
    2ab6:	48 e1       	ldi	r20, 0x18	; 24
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	8f e3       	ldi	r24, 0x3F	; 63
    2abc:	90 e2       	ldi	r25, 0x20	; 32
    2abe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gfx_mono_draw_string>
    2ac2:	66 e3       	ldi	r22, 0x36	; 54
		}
		
		delay_ms(100);
    2ac4:	72 e8       	ldi	r23, 0x82	; 130
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	05 df       	rcall	.-502    	; 0x28d6 <__portable_avr_delay_cycles>
    2acc:	bc cf       	rjmp	.-136    	; 0x2a46 <main+0xb2>

00002ace <__udivmodsi4>:
	}
    2ace:	a1 e2       	ldi	r26, 0x21	; 33
    2ad0:	1a 2e       	mov	r1, r26
    2ad2:	aa 1b       	sub	r26, r26
    2ad4:	bb 1b       	sub	r27, r27
    2ad6:	fd 01       	movw	r30, r26
    2ad8:	0d c0       	rjmp	.+26     	; 0x2af4 <__udivmodsi4_ep>

00002ada <__udivmodsi4_loop>:
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	ee 1f       	adc	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	a2 17       	cp	r26, r18
    2ae4:	b3 07       	cpc	r27, r19
    2ae6:	e4 07       	cpc	r30, r20
    2ae8:	f5 07       	cpc	r31, r21
    2aea:	20 f0       	brcs	.+8      	; 0x2af4 <__udivmodsi4_ep>
    2aec:	a2 1b       	sub	r26, r18
    2aee:	b3 0b       	sbc	r27, r19
    2af0:	e4 0b       	sbc	r30, r20
    2af2:	f5 0b       	sbc	r31, r21

00002af4 <__udivmodsi4_ep>:
    2af4:	66 1f       	adc	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	1a 94       	dec	r1
    2afe:	69 f7       	brne	.-38     	; 0x2ada <__udivmodsi4_loop>
    2b00:	60 95       	com	r22
    2b02:	70 95       	com	r23
    2b04:	80 95       	com	r24
    2b06:	90 95       	com	r25
    2b08:	9b 01       	movw	r18, r22
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	bd 01       	movw	r22, r26
    2b0e:	cf 01       	movw	r24, r30
    2b10:	08 95       	ret

00002b12 <snprintf>:
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0e 89       	ldd	r16, Y+22	; 0x16
    2b26:	1f 89       	ldd	r17, Y+23	; 0x17
    2b28:	88 8d       	ldd	r24, Y+24	; 0x18
    2b2a:	99 8d       	ldd	r25, Y+25	; 0x19
    2b2c:	26 e0       	ldi	r18, 0x06	; 6
    2b2e:	2c 83       	std	Y+4, r18	; 0x04
    2b30:	09 83       	std	Y+1, r16	; 0x01
    2b32:	1a 83       	std	Y+2, r17	; 0x02
    2b34:	97 ff       	sbrs	r25, 7
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <snprintf+0x2a>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e8       	ldi	r25, 0x80	; 128
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	ae 01       	movw	r20, r28
    2b44:	44 5e       	subi	r20, 0xE4	; 228
    2b46:	5f 4f       	sbci	r21, 0xFF	; 255
    2b48:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b4a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	01 96       	adiw	r24, 0x01	; 1
    2b50:	16 d0       	rcall	.+44     	; 0x2b7e <vfprintf>
    2b52:	4d 81       	ldd	r20, Y+5	; 0x05
    2b54:	5e 81       	ldd	r21, Y+6	; 0x06
    2b56:	57 fd       	sbrc	r21, 7
    2b58:	0a c0       	rjmp	.+20     	; 0x2b6e <snprintf+0x5c>
    2b5a:	2f 81       	ldd	r18, Y+7	; 0x07
    2b5c:	38 85       	ldd	r19, Y+8	; 0x08
    2b5e:	42 17       	cp	r20, r18
    2b60:	53 07       	cpc	r21, r19
    2b62:	0c f4       	brge	.+2      	; 0x2b66 <snprintf+0x54>
    2b64:	9a 01       	movw	r18, r20
    2b66:	f8 01       	movw	r30, r16
    2b68:	e2 0f       	add	r30, r18
    2b6a:	f3 1f       	adc	r31, r19
    2b6c:	10 82       	st	Z, r1
    2b6e:	2e 96       	adiw	r28, 0x0e	; 14
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	08 95       	ret

00002b7e <vfprintf>:
    2b7e:	2f 92       	push	r2
    2b80:	3f 92       	push	r3
    2b82:	4f 92       	push	r4
    2b84:	5f 92       	push	r5
    2b86:	6f 92       	push	r6
    2b88:	7f 92       	push	r7
    2b8a:	8f 92       	push	r8
    2b8c:	9f 92       	push	r9
    2b8e:	af 92       	push	r10
    2b90:	bf 92       	push	r11
    2b92:	cf 92       	push	r12
    2b94:	df 92       	push	r13
    2b96:	ef 92       	push	r14
    2b98:	ff 92       	push	r15
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	2b 97       	sbiw	r28, 0x0b	; 11
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	6c 01       	movw	r12, r24
    2bae:	7b 01       	movw	r14, r22
    2bb0:	8a 01       	movw	r16, r20
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	16 82       	std	Z+6, r1	; 0x06
    2bb6:	17 82       	std	Z+7, r1	; 0x07
    2bb8:	83 81       	ldd	r24, Z+3	; 0x03
    2bba:	81 ff       	sbrs	r24, 1
    2bbc:	bf c1       	rjmp	.+894    	; 0x2f3c <vfprintf+0x3be>
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	3c 01       	movw	r6, r24
    2bc4:	f6 01       	movw	r30, r12
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	f7 01       	movw	r30, r14
    2bca:	93 fd       	sbrc	r25, 3
    2bcc:	85 91       	lpm	r24, Z+
    2bce:	93 ff       	sbrs	r25, 3
    2bd0:	81 91       	ld	r24, Z+
    2bd2:	7f 01       	movw	r14, r30
    2bd4:	88 23       	and	r24, r24
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <vfprintf+0x5c>
    2bd8:	ad c1       	rjmp	.+858    	; 0x2f34 <vfprintf+0x3b6>
    2bda:	85 32       	cpi	r24, 0x25	; 37
    2bdc:	39 f4       	brne	.+14     	; 0x2bec <vfprintf+0x6e>
    2bde:	93 fd       	sbrc	r25, 3
    2be0:	85 91       	lpm	r24, Z+
    2be2:	93 ff       	sbrs	r25, 3
    2be4:	81 91       	ld	r24, Z+
    2be6:	7f 01       	movw	r14, r30
    2be8:	85 32       	cpi	r24, 0x25	; 37
    2bea:	21 f4       	brne	.+8      	; 0x2bf4 <vfprintf+0x76>
    2bec:	b6 01       	movw	r22, r12
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	d3 d1       	rcall	.+934    	; 0x2f98 <fputc>
    2bf2:	e8 cf       	rjmp	.-48     	; 0x2bc4 <vfprintf+0x46>
    2bf4:	91 2c       	mov	r9, r1
    2bf6:	21 2c       	mov	r2, r1
    2bf8:	31 2c       	mov	r3, r1
    2bfa:	ff e1       	ldi	r31, 0x1F	; 31
    2bfc:	f3 15       	cp	r31, r3
    2bfe:	d8 f0       	brcs	.+54     	; 0x2c36 <vfprintf+0xb8>
    2c00:	8b 32       	cpi	r24, 0x2B	; 43
    2c02:	79 f0       	breq	.+30     	; 0x2c22 <vfprintf+0xa4>
    2c04:	38 f4       	brcc	.+14     	; 0x2c14 <vfprintf+0x96>
    2c06:	80 32       	cpi	r24, 0x20	; 32
    2c08:	79 f0       	breq	.+30     	; 0x2c28 <vfprintf+0xaa>
    2c0a:	83 32       	cpi	r24, 0x23	; 35
    2c0c:	a1 f4       	brne	.+40     	; 0x2c36 <vfprintf+0xb8>
    2c0e:	23 2d       	mov	r18, r3
    2c10:	20 61       	ori	r18, 0x10	; 16
    2c12:	1d c0       	rjmp	.+58     	; 0x2c4e <vfprintf+0xd0>
    2c14:	8d 32       	cpi	r24, 0x2D	; 45
    2c16:	61 f0       	breq	.+24     	; 0x2c30 <vfprintf+0xb2>
    2c18:	80 33       	cpi	r24, 0x30	; 48
    2c1a:	69 f4       	brne	.+26     	; 0x2c36 <vfprintf+0xb8>
    2c1c:	23 2d       	mov	r18, r3
    2c1e:	21 60       	ori	r18, 0x01	; 1
    2c20:	16 c0       	rjmp	.+44     	; 0x2c4e <vfprintf+0xd0>
    2c22:	83 2d       	mov	r24, r3
    2c24:	82 60       	ori	r24, 0x02	; 2
    2c26:	38 2e       	mov	r3, r24
    2c28:	e3 2d       	mov	r30, r3
    2c2a:	e4 60       	ori	r30, 0x04	; 4
    2c2c:	3e 2e       	mov	r3, r30
    2c2e:	2a c0       	rjmp	.+84     	; 0x2c84 <vfprintf+0x106>
    2c30:	f3 2d       	mov	r31, r3
    2c32:	f8 60       	ori	r31, 0x08	; 8
    2c34:	1d c0       	rjmp	.+58     	; 0x2c70 <vfprintf+0xf2>
    2c36:	37 fc       	sbrc	r3, 7
    2c38:	2d c0       	rjmp	.+90     	; 0x2c94 <vfprintf+0x116>
    2c3a:	20 ed       	ldi	r18, 0xD0	; 208
    2c3c:	28 0f       	add	r18, r24
    2c3e:	2a 30       	cpi	r18, 0x0A	; 10
    2c40:	40 f0       	brcs	.+16     	; 0x2c52 <vfprintf+0xd4>
    2c42:	8e 32       	cpi	r24, 0x2E	; 46
    2c44:	b9 f4       	brne	.+46     	; 0x2c74 <vfprintf+0xf6>
    2c46:	36 fc       	sbrc	r3, 6
    2c48:	75 c1       	rjmp	.+746    	; 0x2f34 <vfprintf+0x3b6>
    2c4a:	23 2d       	mov	r18, r3
    2c4c:	20 64       	ori	r18, 0x40	; 64
    2c4e:	32 2e       	mov	r3, r18
    2c50:	19 c0       	rjmp	.+50     	; 0x2c84 <vfprintf+0x106>
    2c52:	36 fe       	sbrs	r3, 6
    2c54:	06 c0       	rjmp	.+12     	; 0x2c62 <vfprintf+0xe4>
    2c56:	8a e0       	ldi	r24, 0x0A	; 10
    2c58:	98 9e       	mul	r9, r24
    2c5a:	20 0d       	add	r18, r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	92 2e       	mov	r9, r18
    2c60:	11 c0       	rjmp	.+34     	; 0x2c84 <vfprintf+0x106>
    2c62:	ea e0       	ldi	r30, 0x0A	; 10
    2c64:	2e 9e       	mul	r2, r30
    2c66:	20 0d       	add	r18, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	22 2e       	mov	r2, r18
    2c6c:	f3 2d       	mov	r31, r3
    2c6e:	f0 62       	ori	r31, 0x20	; 32
    2c70:	3f 2e       	mov	r3, r31
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <vfprintf+0x106>
    2c74:	8c 36       	cpi	r24, 0x6C	; 108
    2c76:	21 f4       	brne	.+8      	; 0x2c80 <vfprintf+0x102>
    2c78:	83 2d       	mov	r24, r3
    2c7a:	80 68       	ori	r24, 0x80	; 128
    2c7c:	38 2e       	mov	r3, r24
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x106>
    2c80:	88 36       	cpi	r24, 0x68	; 104
    2c82:	41 f4       	brne	.+16     	; 0x2c94 <vfprintf+0x116>
    2c84:	f7 01       	movw	r30, r14
    2c86:	93 fd       	sbrc	r25, 3
    2c88:	85 91       	lpm	r24, Z+
    2c8a:	93 ff       	sbrs	r25, 3
    2c8c:	81 91       	ld	r24, Z+
    2c8e:	7f 01       	movw	r14, r30
    2c90:	81 11       	cpse	r24, r1
    2c92:	b3 cf       	rjmp	.-154    	; 0x2bfa <vfprintf+0x7c>
    2c94:	98 2f       	mov	r25, r24
    2c96:	9f 7d       	andi	r25, 0xDF	; 223
    2c98:	95 54       	subi	r25, 0x45	; 69
    2c9a:	93 30       	cpi	r25, 0x03	; 3
    2c9c:	28 f4       	brcc	.+10     	; 0x2ca8 <vfprintf+0x12a>
    2c9e:	0c 5f       	subi	r16, 0xFC	; 252
    2ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca2:	9f e3       	ldi	r25, 0x3F	; 63
    2ca4:	99 83       	std	Y+1, r25	; 0x01
    2ca6:	0d c0       	rjmp	.+26     	; 0x2cc2 <vfprintf+0x144>
    2ca8:	83 36       	cpi	r24, 0x63	; 99
    2caa:	31 f0       	breq	.+12     	; 0x2cb8 <vfprintf+0x13a>
    2cac:	83 37       	cpi	r24, 0x73	; 115
    2cae:	71 f0       	breq	.+28     	; 0x2ccc <vfprintf+0x14e>
    2cb0:	83 35       	cpi	r24, 0x53	; 83
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <vfprintf+0x138>
    2cb4:	55 c0       	rjmp	.+170    	; 0x2d60 <vfprintf+0x1e2>
    2cb6:	20 c0       	rjmp	.+64     	; 0x2cf8 <vfprintf+0x17a>
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 81       	ld	r24, Z
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	0e 5f       	subi	r16, 0xFE	; 254
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	88 24       	eor	r8, r8
    2cc4:	83 94       	inc	r8
    2cc6:	91 2c       	mov	r9, r1
    2cc8:	53 01       	movw	r10, r6
    2cca:	12 c0       	rjmp	.+36     	; 0x2cf0 <vfprintf+0x172>
    2ccc:	28 01       	movw	r4, r16
    2cce:	f2 e0       	ldi	r31, 0x02	; 2
    2cd0:	4f 0e       	add	r4, r31
    2cd2:	51 1c       	adc	r5, r1
    2cd4:	f8 01       	movw	r30, r16
    2cd6:	a0 80       	ld	r10, Z
    2cd8:	b1 80       	ldd	r11, Z+1	; 0x01
    2cda:	36 fe       	sbrs	r3, 6
    2cdc:	03 c0       	rjmp	.+6      	; 0x2ce4 <vfprintf+0x166>
    2cde:	69 2d       	mov	r22, r9
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <vfprintf+0x16a>
    2ce4:	6f ef       	ldi	r22, 0xFF	; 255
    2ce6:	7f ef       	ldi	r23, 0xFF	; 255
    2ce8:	c5 01       	movw	r24, r10
    2cea:	4b d1       	rcall	.+662    	; 0x2f82 <strnlen>
    2cec:	4c 01       	movw	r8, r24
    2cee:	82 01       	movw	r16, r4
    2cf0:	f3 2d       	mov	r31, r3
    2cf2:	ff 77       	andi	r31, 0x7F	; 127
    2cf4:	3f 2e       	mov	r3, r31
    2cf6:	15 c0       	rjmp	.+42     	; 0x2d22 <vfprintf+0x1a4>
    2cf8:	28 01       	movw	r4, r16
    2cfa:	22 e0       	ldi	r18, 0x02	; 2
    2cfc:	42 0e       	add	r4, r18
    2cfe:	51 1c       	adc	r5, r1
    2d00:	f8 01       	movw	r30, r16
    2d02:	a0 80       	ld	r10, Z
    2d04:	b1 80       	ldd	r11, Z+1	; 0x01
    2d06:	36 fe       	sbrs	r3, 6
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <vfprintf+0x192>
    2d0a:	69 2d       	mov	r22, r9
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <vfprintf+0x196>
    2d10:	6f ef       	ldi	r22, 0xFF	; 255
    2d12:	7f ef       	ldi	r23, 0xFF	; 255
    2d14:	c5 01       	movw	r24, r10
    2d16:	2a d1       	rcall	.+596    	; 0x2f6c <strnlen_P>
    2d18:	4c 01       	movw	r8, r24
    2d1a:	f3 2d       	mov	r31, r3
    2d1c:	f0 68       	ori	r31, 0x80	; 128
    2d1e:	3f 2e       	mov	r3, r31
    2d20:	82 01       	movw	r16, r4
    2d22:	33 fc       	sbrc	r3, 3
    2d24:	19 c0       	rjmp	.+50     	; 0x2d58 <vfprintf+0x1da>
    2d26:	82 2d       	mov	r24, r2
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	88 16       	cp	r8, r24
    2d2c:	99 06       	cpc	r9, r25
    2d2e:	a0 f4       	brcc	.+40     	; 0x2d58 <vfprintf+0x1da>
    2d30:	b6 01       	movw	r22, r12
    2d32:	80 e2       	ldi	r24, 0x20	; 32
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	30 d1       	rcall	.+608    	; 0x2f98 <fputc>
    2d38:	2a 94       	dec	r2
    2d3a:	f5 cf       	rjmp	.-22     	; 0x2d26 <vfprintf+0x1a8>
    2d3c:	f5 01       	movw	r30, r10
    2d3e:	37 fc       	sbrc	r3, 7
    2d40:	85 91       	lpm	r24, Z+
    2d42:	37 fe       	sbrs	r3, 7
    2d44:	81 91       	ld	r24, Z+
    2d46:	5f 01       	movw	r10, r30
    2d48:	b6 01       	movw	r22, r12
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	25 d1       	rcall	.+586    	; 0x2f98 <fputc>
    2d4e:	21 10       	cpse	r2, r1
    2d50:	2a 94       	dec	r2
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	82 1a       	sub	r8, r18
    2d56:	91 08       	sbc	r9, r1
    2d58:	81 14       	cp	r8, r1
    2d5a:	91 04       	cpc	r9, r1
    2d5c:	79 f7       	brne	.-34     	; 0x2d3c <vfprintf+0x1be>
    2d5e:	e1 c0       	rjmp	.+450    	; 0x2f22 <vfprintf+0x3a4>
    2d60:	84 36       	cpi	r24, 0x64	; 100
    2d62:	11 f0       	breq	.+4      	; 0x2d68 <vfprintf+0x1ea>
    2d64:	89 36       	cpi	r24, 0x69	; 105
    2d66:	39 f5       	brne	.+78     	; 0x2db6 <vfprintf+0x238>
    2d68:	f8 01       	movw	r30, r16
    2d6a:	37 fe       	sbrs	r3, 7
    2d6c:	07 c0       	rjmp	.+14     	; 0x2d7c <vfprintf+0x1fe>
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	0c 5f       	subi	r16, 0xFC	; 252
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <vfprintf+0x20e>
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	07 2e       	mov	r0, r23
    2d82:	00 0c       	add	r0, r0
    2d84:	88 0b       	sbc	r24, r24
    2d86:	99 0b       	sbc	r25, r25
    2d88:	0e 5f       	subi	r16, 0xFE	; 254
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	f3 2d       	mov	r31, r3
    2d8e:	ff 76       	andi	r31, 0x6F	; 111
    2d90:	3f 2e       	mov	r3, r31
    2d92:	97 ff       	sbrs	r25, 7
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <vfprintf+0x22a>
    2d96:	90 95       	com	r25
    2d98:	80 95       	com	r24
    2d9a:	70 95       	com	r23
    2d9c:	61 95       	neg	r22
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	8f 4f       	sbci	r24, 0xFF	; 255
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	f0 68       	ori	r31, 0x80	; 128
    2da6:	3f 2e       	mov	r3, r31
    2da8:	2a e0       	ldi	r18, 0x0A	; 10
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	a3 01       	movw	r20, r6
    2dae:	30 d1       	rcall	.+608    	; 0x3010 <__ultoa_invert>
    2db0:	88 2e       	mov	r8, r24
    2db2:	86 18       	sub	r8, r6
    2db4:	44 c0       	rjmp	.+136    	; 0x2e3e <vfprintf+0x2c0>
    2db6:	85 37       	cpi	r24, 0x75	; 117
    2db8:	31 f4       	brne	.+12     	; 0x2dc6 <vfprintf+0x248>
    2dba:	23 2d       	mov	r18, r3
    2dbc:	2f 7e       	andi	r18, 0xEF	; 239
    2dbe:	b2 2e       	mov	r11, r18
    2dc0:	2a e0       	ldi	r18, 0x0A	; 10
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	25 c0       	rjmp	.+74     	; 0x2e10 <vfprintf+0x292>
    2dc6:	93 2d       	mov	r25, r3
    2dc8:	99 7f       	andi	r25, 0xF9	; 249
    2dca:	b9 2e       	mov	r11, r25
    2dcc:	8f 36       	cpi	r24, 0x6F	; 111
    2dce:	c1 f0       	breq	.+48     	; 0x2e00 <vfprintf+0x282>
    2dd0:	18 f4       	brcc	.+6      	; 0x2dd8 <vfprintf+0x25a>
    2dd2:	88 35       	cpi	r24, 0x58	; 88
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <vfprintf+0x276>
    2dd6:	ae c0       	rjmp	.+348    	; 0x2f34 <vfprintf+0x3b6>
    2dd8:	80 37       	cpi	r24, 0x70	; 112
    2dda:	19 f0       	breq	.+6      	; 0x2de2 <vfprintf+0x264>
    2ddc:	88 37       	cpi	r24, 0x78	; 120
    2dde:	21 f0       	breq	.+8      	; 0x2de8 <vfprintf+0x26a>
    2de0:	a9 c0       	rjmp	.+338    	; 0x2f34 <vfprintf+0x3b6>
    2de2:	e9 2f       	mov	r30, r25
    2de4:	e0 61       	ori	r30, 0x10	; 16
    2de6:	be 2e       	mov	r11, r30
    2de8:	b4 fe       	sbrs	r11, 4
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <vfprintf+0x288>
    2dec:	fb 2d       	mov	r31, r11
    2dee:	f4 60       	ori	r31, 0x04	; 4
    2df0:	bf 2e       	mov	r11, r31
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <vfprintf+0x288>
    2df4:	34 fe       	sbrs	r3, 4
    2df6:	0a c0       	rjmp	.+20     	; 0x2e0c <vfprintf+0x28e>
    2df8:	29 2f       	mov	r18, r25
    2dfa:	26 60       	ori	r18, 0x06	; 6
    2dfc:	b2 2e       	mov	r11, r18
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <vfprintf+0x28e>
    2e00:	28 e0       	ldi	r18, 0x08	; 8
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	05 c0       	rjmp	.+10     	; 0x2e10 <vfprintf+0x292>
    2e06:	20 e1       	ldi	r18, 0x10	; 16
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <vfprintf+0x292>
    2e0c:	20 e1       	ldi	r18, 0x10	; 16
    2e0e:	32 e0       	ldi	r19, 0x02	; 2
    2e10:	f8 01       	movw	r30, r16
    2e12:	b7 fe       	sbrs	r11, 7
    2e14:	07 c0       	rjmp	.+14     	; 0x2e24 <vfprintf+0x2a6>
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	0c 5f       	subi	r16, 0xFC	; 252
    2e20:	1f 4f       	sbci	r17, 0xFF	; 255
    2e22:	06 c0       	rjmp	.+12     	; 0x2e30 <vfprintf+0x2b2>
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 5f       	subi	r16, 0xFE	; 254
    2e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e30:	a3 01       	movw	r20, r6
    2e32:	ee d0       	rcall	.+476    	; 0x3010 <__ultoa_invert>
    2e34:	88 2e       	mov	r8, r24
    2e36:	86 18       	sub	r8, r6
    2e38:	fb 2d       	mov	r31, r11
    2e3a:	ff 77       	andi	r31, 0x7F	; 127
    2e3c:	3f 2e       	mov	r3, r31
    2e3e:	36 fe       	sbrs	r3, 6
    2e40:	0d c0       	rjmp	.+26     	; 0x2e5c <vfprintf+0x2de>
    2e42:	23 2d       	mov	r18, r3
    2e44:	2e 7f       	andi	r18, 0xFE	; 254
    2e46:	a2 2e       	mov	r10, r18
    2e48:	89 14       	cp	r8, r9
    2e4a:	58 f4       	brcc	.+22     	; 0x2e62 <vfprintf+0x2e4>
    2e4c:	34 fe       	sbrs	r3, 4
    2e4e:	0b c0       	rjmp	.+22     	; 0x2e66 <vfprintf+0x2e8>
    2e50:	32 fc       	sbrc	r3, 2
    2e52:	09 c0       	rjmp	.+18     	; 0x2e66 <vfprintf+0x2e8>
    2e54:	83 2d       	mov	r24, r3
    2e56:	8e 7e       	andi	r24, 0xEE	; 238
    2e58:	a8 2e       	mov	r10, r24
    2e5a:	05 c0       	rjmp	.+10     	; 0x2e66 <vfprintf+0x2e8>
    2e5c:	b8 2c       	mov	r11, r8
    2e5e:	a3 2c       	mov	r10, r3
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <vfprintf+0x2ea>
    2e62:	b8 2c       	mov	r11, r8
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <vfprintf+0x2ea>
    2e66:	b9 2c       	mov	r11, r9
    2e68:	a4 fe       	sbrs	r10, 4
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <vfprintf+0x30c>
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e8 0d       	add	r30, r8
    2e70:	f1 1d       	adc	r31, r1
    2e72:	80 81       	ld	r24, Z
    2e74:	80 33       	cpi	r24, 0x30	; 48
    2e76:	21 f4       	brne	.+8      	; 0x2e80 <vfprintf+0x302>
    2e78:	9a 2d       	mov	r25, r10
    2e7a:	99 7e       	andi	r25, 0xE9	; 233
    2e7c:	a9 2e       	mov	r10, r25
    2e7e:	09 c0       	rjmp	.+18     	; 0x2e92 <vfprintf+0x314>
    2e80:	a2 fe       	sbrs	r10, 2
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <vfprintf+0x312>
    2e84:	b3 94       	inc	r11
    2e86:	b3 94       	inc	r11
    2e88:	04 c0       	rjmp	.+8      	; 0x2e92 <vfprintf+0x314>
    2e8a:	8a 2d       	mov	r24, r10
    2e8c:	86 78       	andi	r24, 0x86	; 134
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <vfprintf+0x314>
    2e90:	b3 94       	inc	r11
    2e92:	a3 fc       	sbrc	r10, 3
    2e94:	10 c0       	rjmp	.+32     	; 0x2eb6 <vfprintf+0x338>
    2e96:	a0 fe       	sbrs	r10, 0
    2e98:	06 c0       	rjmp	.+12     	; 0x2ea6 <vfprintf+0x328>
    2e9a:	b2 14       	cp	r11, r2
    2e9c:	80 f4       	brcc	.+32     	; 0x2ebe <vfprintf+0x340>
    2e9e:	28 0c       	add	r2, r8
    2ea0:	92 2c       	mov	r9, r2
    2ea2:	9b 18       	sub	r9, r11
    2ea4:	0d c0       	rjmp	.+26     	; 0x2ec0 <vfprintf+0x342>
    2ea6:	b2 14       	cp	r11, r2
    2ea8:	58 f4       	brcc	.+22     	; 0x2ec0 <vfprintf+0x342>
    2eaa:	b6 01       	movw	r22, r12
    2eac:	80 e2       	ldi	r24, 0x20	; 32
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	73 d0       	rcall	.+230    	; 0x2f98 <fputc>
    2eb2:	b3 94       	inc	r11
    2eb4:	f8 cf       	rjmp	.-16     	; 0x2ea6 <vfprintf+0x328>
    2eb6:	b2 14       	cp	r11, r2
    2eb8:	18 f4       	brcc	.+6      	; 0x2ec0 <vfprintf+0x342>
    2eba:	2b 18       	sub	r2, r11
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <vfprintf+0x344>
    2ebe:	98 2c       	mov	r9, r8
    2ec0:	21 2c       	mov	r2, r1
    2ec2:	a4 fe       	sbrs	r10, 4
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <vfprintf+0x366>
    2ec6:	b6 01       	movw	r22, r12
    2ec8:	80 e3       	ldi	r24, 0x30	; 48
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	65 d0       	rcall	.+202    	; 0x2f98 <fputc>
    2ece:	a2 fe       	sbrs	r10, 2
    2ed0:	16 c0       	rjmp	.+44     	; 0x2efe <vfprintf+0x380>
    2ed2:	a1 fc       	sbrc	r10, 1
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <vfprintf+0x35e>
    2ed6:	88 e7       	ldi	r24, 0x78	; 120
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <vfprintf+0x362>
    2edc:	88 e5       	ldi	r24, 0x58	; 88
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	b6 01       	movw	r22, r12
    2ee2:	0c c0       	rjmp	.+24     	; 0x2efc <vfprintf+0x37e>
    2ee4:	8a 2d       	mov	r24, r10
    2ee6:	86 78       	andi	r24, 0x86	; 134
    2ee8:	51 f0       	breq	.+20     	; 0x2efe <vfprintf+0x380>
    2eea:	a1 fe       	sbrs	r10, 1
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <vfprintf+0x374>
    2eee:	8b e2       	ldi	r24, 0x2B	; 43
    2ef0:	01 c0       	rjmp	.+2      	; 0x2ef4 <vfprintf+0x376>
    2ef2:	80 e2       	ldi	r24, 0x20	; 32
    2ef4:	a7 fc       	sbrc	r10, 7
    2ef6:	8d e2       	ldi	r24, 0x2D	; 45
    2ef8:	b6 01       	movw	r22, r12
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	4d d0       	rcall	.+154    	; 0x2f98 <fputc>
    2efe:	89 14       	cp	r8, r9
    2f00:	30 f4       	brcc	.+12     	; 0x2f0e <vfprintf+0x390>
    2f02:	b6 01       	movw	r22, r12
    2f04:	80 e3       	ldi	r24, 0x30	; 48
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	47 d0       	rcall	.+142    	; 0x2f98 <fputc>
    2f0a:	9a 94       	dec	r9
    2f0c:	f8 cf       	rjmp	.-16     	; 0x2efe <vfprintf+0x380>
    2f0e:	8a 94       	dec	r8
    2f10:	f3 01       	movw	r30, r6
    2f12:	e8 0d       	add	r30, r8
    2f14:	f1 1d       	adc	r31, r1
    2f16:	80 81       	ld	r24, Z
    2f18:	b6 01       	movw	r22, r12
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	3d d0       	rcall	.+122    	; 0x2f98 <fputc>
    2f1e:	81 10       	cpse	r8, r1
    2f20:	f6 cf       	rjmp	.-20     	; 0x2f0e <vfprintf+0x390>
    2f22:	22 20       	and	r2, r2
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <vfprintf+0x3aa>
    2f26:	4e ce       	rjmp	.-868    	; 0x2bc4 <vfprintf+0x46>
    2f28:	b6 01       	movw	r22, r12
    2f2a:	80 e2       	ldi	r24, 0x20	; 32
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	34 d0       	rcall	.+104    	; 0x2f98 <fputc>
    2f30:	2a 94       	dec	r2
    2f32:	f7 cf       	rjmp	.-18     	; 0x2f22 <vfprintf+0x3a4>
    2f34:	f6 01       	movw	r30, r12
    2f36:	86 81       	ldd	r24, Z+6	; 0x06
    2f38:	97 81       	ldd	r25, Z+7	; 0x07
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <vfprintf+0x3c2>
    2f3c:	8f ef       	ldi	r24, 0xFF	; 255
    2f3e:	9f ef       	ldi	r25, 0xFF	; 255
    2f40:	2b 96       	adiw	r28, 0x0b	; 11
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	ff 90       	pop	r15
    2f50:	ef 90       	pop	r14
    2f52:	df 90       	pop	r13
    2f54:	cf 90       	pop	r12
    2f56:	bf 90       	pop	r11
    2f58:	af 90       	pop	r10
    2f5a:	9f 90       	pop	r9
    2f5c:	8f 90       	pop	r8
    2f5e:	7f 90       	pop	r7
    2f60:	6f 90       	pop	r6
    2f62:	5f 90       	pop	r5
    2f64:	4f 90       	pop	r4
    2f66:	3f 90       	pop	r3
    2f68:	2f 90       	pop	r2
    2f6a:	08 95       	ret

00002f6c <strnlen_P>:
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	05 90       	lpm	r0, Z+
    2f70:	61 50       	subi	r22, 0x01	; 1
    2f72:	70 40       	sbci	r23, 0x00	; 0
    2f74:	01 10       	cpse	r0, r1
    2f76:	d8 f7       	brcc	.-10     	; 0x2f6e <strnlen_P+0x2>
    2f78:	80 95       	com	r24
    2f7a:	90 95       	com	r25
    2f7c:	8e 0f       	add	r24, r30
    2f7e:	9f 1f       	adc	r25, r31
    2f80:	08 95       	ret

00002f82 <strnlen>:
    2f82:	fc 01       	movw	r30, r24
    2f84:	61 50       	subi	r22, 0x01	; 1
    2f86:	70 40       	sbci	r23, 0x00	; 0
    2f88:	01 90       	ld	r0, Z+
    2f8a:	01 10       	cpse	r0, r1
    2f8c:	d8 f7       	brcc	.-10     	; 0x2f84 <strnlen+0x2>
    2f8e:	80 95       	com	r24
    2f90:	90 95       	com	r25
    2f92:	8e 0f       	add	r24, r30
    2f94:	9f 1f       	adc	r25, r31
    2f96:	08 95       	ret

00002f98 <fputc>:
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	fb 01       	movw	r30, r22
    2fa2:	23 81       	ldd	r18, Z+3	; 0x03
    2fa4:	21 fd       	sbrc	r18, 1
    2fa6:	03 c0       	rjmp	.+6      	; 0x2fae <fputc+0x16>
    2fa8:	8f ef       	ldi	r24, 0xFF	; 255
    2faa:	9f ef       	ldi	r25, 0xFF	; 255
    2fac:	2c c0       	rjmp	.+88     	; 0x3006 <fputc+0x6e>
    2fae:	22 ff       	sbrs	r18, 2
    2fb0:	16 c0       	rjmp	.+44     	; 0x2fde <fputc+0x46>
    2fb2:	46 81       	ldd	r20, Z+6	; 0x06
    2fb4:	57 81       	ldd	r21, Z+7	; 0x07
    2fb6:	24 81       	ldd	r18, Z+4	; 0x04
    2fb8:	35 81       	ldd	r19, Z+5	; 0x05
    2fba:	42 17       	cp	r20, r18
    2fbc:	53 07       	cpc	r21, r19
    2fbe:	44 f4       	brge	.+16     	; 0x2fd0 <fputc+0x38>
    2fc0:	a0 81       	ld	r26, Z
    2fc2:	b1 81       	ldd	r27, Z+1	; 0x01
    2fc4:	9d 01       	movw	r18, r26
    2fc6:	2f 5f       	subi	r18, 0xFF	; 255
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fca:	20 83       	st	Z, r18
    2fcc:	31 83       	std	Z+1, r19	; 0x01
    2fce:	8c 93       	st	X, r24
    2fd0:	26 81       	ldd	r18, Z+6	; 0x06
    2fd2:	37 81       	ldd	r19, Z+7	; 0x07
    2fd4:	2f 5f       	subi	r18, 0xFF	; 255
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	26 83       	std	Z+6, r18	; 0x06
    2fda:	37 83       	std	Z+7, r19	; 0x07
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <fputc+0x6e>
    2fde:	8b 01       	movw	r16, r22
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	fb 01       	movw	r30, r22
    2fe4:	00 84       	ldd	r0, Z+8	; 0x08
    2fe6:	f1 85       	ldd	r31, Z+9	; 0x09
    2fe8:	e0 2d       	mov	r30, r0
    2fea:	19 95       	eicall
    2fec:	89 2b       	or	r24, r25
    2fee:	e1 f6       	brne	.-72     	; 0x2fa8 <fputc+0x10>
    2ff0:	d8 01       	movw	r26, r16
    2ff2:	16 96       	adiw	r26, 0x06	; 6
    2ff4:	8d 91       	ld	r24, X+
    2ff6:	9c 91       	ld	r25, X
    2ff8:	17 97       	sbiw	r26, 0x07	; 7
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	16 96       	adiw	r26, 0x06	; 6
    2ffe:	8d 93       	st	X+, r24
    3000:	9c 93       	st	X, r25
    3002:	17 97       	sbiw	r26, 0x07	; 7
    3004:	ce 01       	movw	r24, r28
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	08 95       	ret

00003010 <__ultoa_invert>:
    3010:	fa 01       	movw	r30, r20
    3012:	aa 27       	eor	r26, r26
    3014:	28 30       	cpi	r18, 0x08	; 8
    3016:	51 f1       	breq	.+84     	; 0x306c <__ultoa_invert+0x5c>
    3018:	20 31       	cpi	r18, 0x10	; 16
    301a:	81 f1       	breq	.+96     	; 0x307c <__ultoa_invert+0x6c>
    301c:	e8 94       	clt
    301e:	6f 93       	push	r22
    3020:	6e 7f       	andi	r22, 0xFE	; 254
    3022:	6e 5f       	subi	r22, 0xFE	; 254
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	8f 4f       	sbci	r24, 0xFF	; 255
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	af 4f       	sbci	r26, 0xFF	; 255
    302c:	b1 e0       	ldi	r27, 0x01	; 1
    302e:	3e d0       	rcall	.+124    	; 0x30ac <__ultoa_invert+0x9c>
    3030:	b4 e0       	ldi	r27, 0x04	; 4
    3032:	3c d0       	rcall	.+120    	; 0x30ac <__ultoa_invert+0x9c>
    3034:	67 0f       	add	r22, r23
    3036:	78 1f       	adc	r23, r24
    3038:	89 1f       	adc	r24, r25
    303a:	9a 1f       	adc	r25, r26
    303c:	a1 1d       	adc	r26, r1
    303e:	68 0f       	add	r22, r24
    3040:	79 1f       	adc	r23, r25
    3042:	8a 1f       	adc	r24, r26
    3044:	91 1d       	adc	r25, r1
    3046:	a1 1d       	adc	r26, r1
    3048:	6a 0f       	add	r22, r26
    304a:	71 1d       	adc	r23, r1
    304c:	81 1d       	adc	r24, r1
    304e:	91 1d       	adc	r25, r1
    3050:	a1 1d       	adc	r26, r1
    3052:	20 d0       	rcall	.+64     	; 0x3094 <__ultoa_invert+0x84>
    3054:	09 f4       	brne	.+2      	; 0x3058 <__ultoa_invert+0x48>
    3056:	68 94       	set
    3058:	3f 91       	pop	r19
    305a:	2a e0       	ldi	r18, 0x0A	; 10
    305c:	26 9f       	mul	r18, r22
    305e:	11 24       	eor	r1, r1
    3060:	30 19       	sub	r19, r0
    3062:	30 5d       	subi	r19, 0xD0	; 208
    3064:	31 93       	st	Z+, r19
    3066:	de f6       	brtc	.-74     	; 0x301e <__ultoa_invert+0xe>
    3068:	cf 01       	movw	r24, r30
    306a:	08 95       	ret
    306c:	46 2f       	mov	r20, r22
    306e:	47 70       	andi	r20, 0x07	; 7
    3070:	40 5d       	subi	r20, 0xD0	; 208
    3072:	41 93       	st	Z+, r20
    3074:	b3 e0       	ldi	r27, 0x03	; 3
    3076:	0f d0       	rcall	.+30     	; 0x3096 <__ultoa_invert+0x86>
    3078:	c9 f7       	brne	.-14     	; 0x306c <__ultoa_invert+0x5c>
    307a:	f6 cf       	rjmp	.-20     	; 0x3068 <__ultoa_invert+0x58>
    307c:	46 2f       	mov	r20, r22
    307e:	4f 70       	andi	r20, 0x0F	; 15
    3080:	40 5d       	subi	r20, 0xD0	; 208
    3082:	4a 33       	cpi	r20, 0x3A	; 58
    3084:	18 f0       	brcs	.+6      	; 0x308c <__ultoa_invert+0x7c>
    3086:	49 5d       	subi	r20, 0xD9	; 217
    3088:	31 fd       	sbrc	r19, 1
    308a:	40 52       	subi	r20, 0x20	; 32
    308c:	41 93       	st	Z+, r20
    308e:	02 d0       	rcall	.+4      	; 0x3094 <__ultoa_invert+0x84>
    3090:	a9 f7       	brne	.-22     	; 0x307c <__ultoa_invert+0x6c>
    3092:	ea cf       	rjmp	.-44     	; 0x3068 <__ultoa_invert+0x58>
    3094:	b4 e0       	ldi	r27, 0x04	; 4
    3096:	a6 95       	lsr	r26
    3098:	97 95       	ror	r25
    309a:	87 95       	ror	r24
    309c:	77 95       	ror	r23
    309e:	67 95       	ror	r22
    30a0:	ba 95       	dec	r27
    30a2:	c9 f7       	brne	.-14     	; 0x3096 <__ultoa_invert+0x86>
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	61 05       	cpc	r22, r1
    30a8:	71 05       	cpc	r23, r1
    30aa:	08 95       	ret
    30ac:	9b 01       	movw	r18, r22
    30ae:	ac 01       	movw	r20, r24
    30b0:	0a 2e       	mov	r0, r26
    30b2:	06 94       	lsr	r0
    30b4:	57 95       	ror	r21
    30b6:	47 95       	ror	r20
    30b8:	37 95       	ror	r19
    30ba:	27 95       	ror	r18
    30bc:	ba 95       	dec	r27
    30be:	c9 f7       	brne	.-14     	; 0x30b2 <__ultoa_invert+0xa2>
    30c0:	62 0f       	add	r22, r18
    30c2:	73 1f       	adc	r23, r19
    30c4:	84 1f       	adc	r24, r20
    30c6:	95 1f       	adc	r25, r21
    30c8:	a0 1d       	adc	r26, r0
    30ca:	08 95       	ret

000030cc <_exit>:
    30cc:	f8 94       	cli

000030ce <__stop_program>:
    30ce:	ff cf       	rjmp	.-2      	; 0x30ce <__stop_program>
